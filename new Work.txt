1. Baar baar Otp send nhi hota hai  but auto logon nhi  hao isme tokem save nhi ho raha hai 

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-toastify';
import Image from 'next/image';
import pic from '../../public/images/Library.png';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner, faEye, faEyeSlash, faArrowLeft } from '@fortawesome/free-solid-svg-icons';

const LoginPage = () => {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [dob, setDob] = useState('');
  const [otp, setOtp] = useState('');
  const [isOtpSent, setIsOtpSent] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [resendTimer, setResendTimer] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [step, setStep] = useState<'email' | 'verify'>('email');
  const [userType, setUserType] = useState<'admin' | 'student' | null>(null);
  const [rememberedUser, setRememberedUser] = useState<string | null>(null);

  // Check for remembered user on mount
  useEffect(() => {
    const remembered = localStorage.getItem('rememberedUser');
    if (remembered) {
      setRememberedUser(remembered);
    }
  }, []);

  // Handle resend OTP timer
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isOtpSent && resendTimer > 0) {
      timer = setInterval(() => {
        setResendTimer((prev) => (prev > 0 ? prev - 1 : 0));
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [isOtpSent, resendTimer]);

  // Check user type (admin or student)
  const checkUserType = async (email: string) => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, step: 'email' }),
      });

      const data = await res.json();
      if (res.ok && data.userType) {
        setUserType(data.userType);
        setStep('verify');
      } else {
        toast.error(data.message || 'Email not found');
      }
    } catch (error: any) {
      console.error('Error checking user type:', error);
      toast.error('An error occurred while checking user type');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle email submission
  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      toast.error('Email is required');
      return;
    }

    await checkUserType(email);
  };

  // Handle login (password/DOB and OTP if needed)
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const body = {
        email,
        step: 'verify',
        ...(userType === 'admin' ? { password } : { dob }),
        rememberMe,
        skipOTP: rememberedUser === email // Skip OTP if this is a remembered user
      };

      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (res.ok) {
        if (data.otpRequired && rememberedUser !== email) {
          setIsOtpSent(true);
          setIsModalOpen(true);
          setResendTimer(55);
          toast.success('OTP sent to your email');
        } else {
          // Only remember user if they checked "Remember Me" and successfully logged in
          if (rememberMe) {
            localStorage.setItem('rememberedUser', email);
            setRememberedUser(email);
          }
          
          localStorage.setItem('token', data.token);
          localStorage.setItem('role', userType || '');
          toast.success('Logged in successfully');
          router.push(userType === 'admin' ? '/admin' : '/student');
          router.refresh();
        }
      } else {
        toast.error(data.message || 'Login failed');
      }
    } catch (error: any) {
      console.error('Login error:', error);
      toast.error('An error occurred during login');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle OTP verification
  const handleOtpVerification = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const res = await fetch('/api/auth/otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, otp, role: userType }),
      });

      const data = await res.json();
      if (res.ok) {
        // Only remember user if they checked "Remember Me" and successfully verified OTP
        if (rememberMe) {
          localStorage.setItem('rememberedUser', email);
          setRememberedUser(email);
        }
        
        localStorage.setItem('token', data.token);
        localStorage.setItem('role', userType || '');
        setIsModalOpen(false);
        setIsOtpSent(false);
        setOtp('');
        setResendTimer(0);
        toast.success('OTP verified successfully');
        router.push(userType === 'admin' ? '/admin' : '/student');
        router.refresh();
      } else {
        toast.error(data.message || 'OTP verification failed');
      }
    } catch (error: any) {
      console.error('OTP verification error:', error);
      toast.error('An error occurred during OTP verification');
    } finally {
      setIsLoading(false);
    }
  };

  // Resend OTP
  const handleResendOtp = async () => {
    if (resendTimer > 0) return;
    setIsLoading(true);
    try {
      const body = {
        email,
        step: 'verify',
        ...(userType === 'admin' ? { password } : { dob }),
        rememberMe,
      };

      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (res.ok && data.otpRequired) {
        setResendTimer(55);
        toast.success('OTP resent to your email');
      } else {
        toast.error(data.message || 'Failed to resend OTP');
      }
    } catch (error: any) {
      console.error('Resend OTP error:', error);
      toast.error('An error occurred while resending OTP');
    } finally {
      setIsLoading(false);
    }
  };

  // Close OTP modal
  const closeModal = () => {
    setIsModalOpen(false);
    setOtp('');
    setIsOtpSent(false);
    setResendTimer(0);
  };

  // Go back to email step
  const goBackToEmail = () => {
    setStep('email');
    setUserType(null);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 to-blue-200 p-4">
      <div className="bg-white p-8 rounded-xl shadow-xl w-full max-w-md">
      
        <div className="flex justify-center mb-2">
          <Image
            src={pic}
            alt="Library Logo"
            width={100}
            height={100}
            className="rounded-full border-4 border-blue-500 shadow-md"
          />
        </div>
          <h2 className="text-3xl font-bold text-center mb-2 text-blue-700">Login</h2>

        {step === 'email' ? (
          <form onSubmit={handleEmailSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-semibold text-gray-700">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                required
              />
            </div>

            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded transition duration-200 flex items-center justify-center"
              disabled={isLoading}
            >
              {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
              Next
            </button>
          </form>
        ) : (
          <form onSubmit={handleLogin} className="space-y-4">
            <div className="flex items-center mb-4">
              <button
                type="button"
                onClick={goBackToEmail}
                className="text-blue-600 hover:text-blue-800 mr-2"
              >
                <FontAwesomeIcon icon={faArrowLeft} />
              </button>
              <span className="text-gray-700">{email}</span>
            </div>

            {userType === 'admin' ? (
              <div className="relative">
                <label className="block text-sm font-semibold text-gray-700">Password</label>
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 pr-10"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 mt-2.5"
                >
                  <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />
                </button>
              </div>
            ) : (
              <div>
                <label className="block text-sm font-semibold text-gray-700">Date of Birth</label>
                <input
                  type="date"
                  value={dob}
                  onChange={(e) => setDob(e.target.value)}
                  className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                  required
                />
              </div>
            )}

            <label className="inline-flex items-center">
              <input
                type="checkbox"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
                className="form-checkbox text-blue-600 mr-2"
              />
              <span className="text-gray-700">Remember Me</span>
            </label>

            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded transition duration-200 flex items-center justify-center"
              disabled={isLoading}
            >
              {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
              Login
            </button>
          </form>
        )}

        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm">
              <h3 className="text-xl font-bold mb-4 text-blue-700">Enter OTP</h3>
              <p className="text-sm text-gray-600 mb-4">We've sent a 6-digit OTP to {email}</p>
              <form onSubmit={handleOtpVerification} className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700">OTP</label>
                  <input
                    type="text"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                    required
                  />
                </div>
                <div className="flex justify-end space-x-2">
                  <button
                    type="button"
                    onClick={closeModal}
                    className="bg-gray-500 hover:bg-gray-600 text-white p-2 rounded transition duration-200"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded transition duration-200 flex items-center justify-center"
                    disabled={isLoading}
                  >
                    {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
                    Verify OTP
                  </button>
                </div>
              </form>
              <p className="text-sm text-gray-500 mt-4">
                Resend OTP in {resendTimer > 0 ? resendTimer : '0'}s{' '}
                <button
                  onClick={handleResendOtp}
                  disabled={resendTimer > 0 || isLoading}
                  className="text-blue-600 hover:text-blue-800 disabled:text-gray-400 ml-2"
                >
                  Resend OTP
                </button>
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LoginPage;
--------------------------------------------------------------------------------------
Aoto Login work but baar otp wala  send hota  Hai
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-toastify';
import Image from 'next/image';
import pic from '../../public/images/Library.png';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner, faEye, faEyeSlash, faArrowLeft } from '@fortawesome/free-solid-svg-icons';

const LoginPage = () => {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [dob, setDob] = useState('');
  const [otp, setOtp] = useState('');
  const [isOtpSent, setIsOtpSent] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [resendTimer, setResendTimer] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [step, setStep] = useState<'email' | 'verify'>('email');
  const [userType, setUserType] = useState<'admin' | 'student' | null>(null);

  // Check for valid token on mount
  useEffect(() => {
    const storedEmail = localStorage.getItem('email') || '';
    const storedRememberMe = localStorage.getItem('rememberMe') === 'true';
    const token = localStorage.getItem('token');
    if (token && storedEmail) {
      setEmail(storedEmail);
      setRememberMe(storedRememberMe);
      validateToken(storedEmail, token);
    }
  }, []);

  // Handle resend OTP timer
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isOtpSent && resendTimer > 0) {
      timer = setInterval(() => {
        setResendTimer((prev) => (prev > 0 ? prev - 1 : 0));
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [isOtpSent, resendTimer]);

  // Validate token for auto-login
  const validateToken = async (email: string, token: string) => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ email, step: 'verify', skipOTP: true }),
      });

      const data = await res.json();
      if (res.ok && data.token) {
        setUserType(data.userType);
        localStorage.setItem('token', data.token);
        localStorage.setItem('role', data.userType);
        localStorage.setItem('email', email);
        if (rememberMe) {
          localStorage.setItem('rememberMe', 'true');
        }
        toast.success('Auto-login successful');
        router.push(data.userType === 'admin' ? '/admin' : '/student');
        router.refresh();
      } else {
        localStorage.removeItem('token');
        toast.error(data.message || 'Invalid or expired token');
      }
    } catch (error: any) {
      console.error('Token validation error:', error);
      localStorage.removeItem('token');
      toast.error('Error validating token');
    } finally {
      setIsLoading(false);
    }
  };

  // Check user type (admin or student)
  const checkUserType = async (email: string) => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, step: 'email' }),
      });

      const data = await res.json();
      if (res.ok && data.userType) {
        setUserType(data.userType);
        setStep('verify');
      } else {
        toast.error(data.message || 'Email not found');
      }
    } catch (error: any) {
      console.error('Error checking user type:', error);
      toast.error('An error occurred while checking user type');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle email submission
  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      toast.error('Email is required');
      return;
    }

    if (rememberMe) {
      localStorage.setItem('email', email);
      localStorage.setItem('rememberMe', 'true');
    } else {
      localStorage.removeItem('email');
      localStorage.removeItem('rememberMe');
    }

    await checkUserType(email);
  };

  // Handle login (password/DOB and OTP if needed)
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const body = {
        email,
        step: 'verify',
        ...(userType === 'admin' ? { password } : { dob }),
        rememberMe,
      };

      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Remember-Me': rememberMe.toString(),
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (res.ok) {
        if (data.otpRequired) {
          setIsOtpSent(true);
          setIsModalOpen(true);
          setResendTimer(55);
          toast.success('OTP sent to your email');
        } else {
          localStorage.setItem('token', data.token);
          localStorage.setItem('role', userType || '');
          localStorage.setItem('email', email);
          if (rememberMe) {
            localStorage.setItem('rememberMe', 'true');
          }
          toast.success('Logged in successfully');
          router.push(userType === 'admin' ? '/admin/students' : '/student/my-account');
          router.refresh();
        }
      } else {
        toast.error(data.message || 'Login failed');
      }
    } catch (error: any) {
      console.error('Login error:', error);
      toast.error('An error occurred during login');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle OTP verification
  const handleOtpVerification = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const res = await fetch('/api/auth/otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Remember-Me': rememberMe.toString(),
        },
        body: JSON.stringify({ email, otp, role: userType }),
      });

      const data = await res.json();
      if (res.ok) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('role', userType || '');
        localStorage.setItem('email', email);
        if (rememberMe) {
          localStorage.setItem('rememberMe', 'true');
        }
        setIsModalOpen(false);
        setIsOtpSent(false);
        setOtp('');
        setResendTimer(0);
        toast.success('OTP verified successfully');
        router.push(userType === 'admin' ? '/admin' : '/student');
        router.refresh();
      } else {
        toast.error(data.message || 'OTP verification failed');
      }
    } catch (error: any) {
      console.error('OTP verification error:', error);
      toast.error('An error occurred during OTP verification');
    } finally {
      setIsLoading(false);
    }
  };

  // Resend OTP
  const handleResendOtp = async () => {
    if (resendTimer > 0) return;
    setIsLoading(true);
    try {
      const body = {
        email,
        step: 'verify',
        ...(userType === 'admin' ? { password } : { dob }),
        rememberMe,
      };

      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Remember-Me': rememberMe.toString(),
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (res.ok && data.otpRequired) {
        setResendTimer(55);
        toast.success('OTP resent to your email');
      } else {
        toast.error(data.message || 'Failed to resend OTP');
      }
    } catch (error: any) {
      console.error('Resend OTP error:', error);
      toast.error('An error occurred while resending OTP');
    } finally {
      setIsLoading(false);
    }
  };

  // Close OTP modal
  const closeModal = () => {
    setIsModalOpen(false);
    setOtp('');
    setIsOtpSent(false);
    setResendTimer(0);
  };

  // Go back to email step
  const goBackToEmail = () => {
    setStep('email');
    setUserType(null);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 to-blue-200 p-4">
      <div className="bg-white p-8 rounded-xl shadow-xl w-full max-w-md">
      
        <div className="flex justify-center mb-2">
          <Image
            src={pic}
            alt="Library Logo"
            width={100}
            height={100}
            className="rounded-full border-4 border-blue-500 shadow-md"
          />
        </div>
          <h2 className="text-3xl font-bold text-center mb-2 text-blue-700">Login</h2>

        {step === 'email' ? (
          <form onSubmit={handleEmailSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-semibold text-gray-700">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                required
              />
            </div>

            <label className="inline-flex items-center">
              <input
                type="checkbox"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
                className="form-checkbox text-blue-600 mr-2"
              />
              <span className="text-gray-700">Remember Me</span>
            </label>

            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded transition duration-200 flex items-center justify-center"
              disabled={isLoading}
            >
              {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
              Next
            </button>
          </form>
        ) : (
          <form onSubmit={handleLogin} className="space-y-4">
            <div className="flex items-center mb-4">
              <button
                type="button"
                onClick={goBackToEmail}
                className="text-blue-600 hover:text-blue-800 mr-2"
              >
                <FontAwesomeIcon icon={faArrowLeft} />
              </button>
              <span className="text-gray-700">{email}</span>
            </div>

            {userType === 'admin' ? (
              <div className="relative">
                <label className="block text-sm font-semibold text-gray-700">Password</label>
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 pr-10"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 mt-2.5"
                >
                  <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />
                </button>
              </div>
            ) : (
              <div>
                <label className="block text-sm font-semibold text-gray-700">Date of Birth</label>
                <input
                  type="date"
                  value={dob}
                  onChange={(e) => setDob(e.target.value)}
                  className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                  required
                />
              </div>
            )}

            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded transition duration-200 flex items-center justify-center"
              disabled={isLoading}
            >
              {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
              Login
            </button>
          </form>
        )}

        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm">
              <h3 className="text-xl font-bold mb-4 text-blue-700">Enter OTP</h3>
              <p className="text-sm text-gray-600 mb-4">We've sent a 6-digit OTP to {email}</p>
              <form onSubmit={handleOtpVerification} className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700">OTP</label>
                  <input
                    type="text"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    className="w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                    required
                  />
                </div>
                <div className="flex justify-end space-x-2">
                  <button
                    type="button"
                    onClick={closeModal}
                    className="bg-gray-500 hover:bg-gray-600 text-white p-2 rounded transition duration-200"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded transition duration-200 flex items-center justify-center"
                    disabled={isLoading}
                  >
                    {isLoading && <FontAwesomeIcon icon={faSpinner} spin className="mr-2" />}
                    Verify OTP
                  </button>
                </div>
              </form>
              <p className="text-sm text-gray-500 mt-4">
                Resend OTP in {resendTimer > 0 ? resendTimer : '0'}s{' '}
                <button
                  onClick={handleResendOtp}
                  disabled={resendTimer > 0 || isLoading}
                  className="text-blue-600 hover:text-blue-800 disabled:text-gray-400 ml-2"
                >
                  Resend OTP
                </button>
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LoginPage;


-----------------------

CREATE TABLE [dbo].[Subject] (
    [SubId] INT IDENTITY(1,1) PRIMARY KEY,
    [Name] NVARCHAR(100) NOT NULL,
    [IsActive] BIT NOT NULL DEFAULT(1),
    [CreatedAt] DATETIME NOT NULL DEFAULT(GETDATE()),
    [CreatedBy] NVARCHAR(100) NOT NULL,
    [UpdatedAt] DATETIME NULL,
    [UpdatedBy] NVARCHAR(100) NULL
);

CREATE TABLE [dbo].[Publication] (
    [PubId] INT IDENTITY(1,1) PRIMARY KEY,
    [Name] NVARCHAR(100) NOT NULL,
    [IsActive] BIT NOT NULL DEFAULT(1),
    [CreatedAt] DATETIME NOT NULL DEFAULT(GETDATE()),
    [CreatedBy] NVARCHAR(100) NOT NULL,
    [UpdatedAt] DATETIME NULL,
    [UpdatedBy] NVARCHAR(100) NULL
);

work done

'use client';

import { useEffect, useState, useRef } from 'react';
import { toast } from 'react-toastify';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner, faEye, faEyeSlash, faArrowLeft, faPlus, faEdit, faTrash, faSearch, faFilter } from '@fortawesome/free-solid-svg-icons';

interface Publication {
  PubId: number;
  Name: string;
  IsActive: boolean;
  CreatedAt: string;
  CreatedBy: string;
  UpdatedAt?: string;
  UpdatedBy?: string;
}

const PublicationsPage = () => {
  const [publications, setPublications] = useState<Publication[]>([]);
  const [name, setName] = useState('');
  const [editingId, setEditingId] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [confirmAction, setConfirmAction] = useState<'delete' | 'toggle' | null>(null);
  const [confirmId, setConfirmId] = useState<number | null>(null);
  const [confirmStatus, setConfirmStatus] = useState<boolean | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');
  const [loading, setLoading] = useState(true);
  const [tableLoading, setTableLoading] = useState(false);

  const modalRef = useRef<HTMLDivElement>(null);
  const confirmModalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchPublications();
  }, [searchTerm, statusFilter]);

  useEffect(() => {
    const handleOutsideClick = (e: MouseEvent) => {
      if (isModalOpen && modalRef.current && !modalRef.current.contains(e.target as Node)) {
        setIsModalOpen(false);
      }
      if (isConfirmModalOpen && confirmModalRef.current && !confirmModalRef.current.contains(e.target as Node)) {
        setIsConfirmModalOpen(false);
      }
    };

    if (isModalOpen || isConfirmModalOpen) {
      document.addEventListener('mousedown', handleOutsideClick);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
      document.body.style.overflow = 'auto';
    };
  }, [isModalOpen, isConfirmModalOpen]);

  const fetchPublications = async () => {
    setTableLoading(true);
    try {
      const params = { search: searchTerm, status: statusFilter };
      const res = await axios.get('/api/publication', { params });
      setPublications(res.data);
    } catch (error) {
      toast.error('Failed to fetch publications');
    } finally {
      setLoading(false);
      setTableLoading(false);
    }
  };

  const sanitizeAndFormatName = (input: string) => {
    return input
      .trim()
      .replace(/[^a-zA-Z0-9 &]/g, '')
      .toUpperCase();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const formattedName = sanitizeAndFormatName(name);
    if (!formattedName) {
      toast.error('Please enter a valid publication name');
      return;
    }

    try {
      const payload = {
        Name: formattedName,
        IsActive: true,
        CreatedBy: 'admin',
        ...(editingId && { PubId: editingId, UpdatedBy: 'admin' }),
      };

      const res = await axios({
        method: editingId ? 'put' : 'post',
        url: '/api/publication',
        data: payload,
      });

      toast.success(editingId ? 'Publication updated' : 'Publication added');
      setName('');
      setEditingId(null);
      setIsModalOpen(false);
      fetchPublications();
    } catch (error) {
      toast.error('An error occurred');
    }
  };

  const handleEdit = (publication: Publication) => {
    setName(publication.Name);
    setEditingId(publication.PubId);
    setIsModalOpen(true);
  };

  const handleDelete = async () => {
    if (!confirmId) return;
    try {
      await axios.delete('/api/publication', { data: { PubId: confirmId } });
      toast.success('Publication deleted');
      setIsConfirmModalOpen(false);
      fetchPublications();
    } catch (error) {
      toast.error('An error occurred');
    }
  };

  const handleToggleActive = async () => {
    if (!confirmId || confirmStatus === null) return;
    try {
      const publication = publications.find(p => p.PubId === confirmId);
      if (!publication) throw new Error('Publication not found');

      await axios.put('/api/publication', {
        PubId: confirmId,
        Name: publication.Name,
        IsActive: !confirmStatus,
        UpdatedBy: 'admin',
      });
      toast.success(`Publication ${confirmStatus ? 'deactivated' : 'activated'}`);
      setIsConfirmModalOpen(false);
      fetchPublications();
    } catch (error: any) {
      const errorMsg = error.response?.data?.message || 'An error occurred';
      toast.error(errorMsg);
    }
  };

  const openConfirmModal = (action: 'delete' | 'toggle', id: number, status?: boolean) => {
    setConfirmAction(action);
    setConfirmId(id);
    setConfirmStatus(status ?? null);
    setIsConfirmModalOpen(true);
  };

  const filteredPublications = publications.filter((publication) => {
    const matchesSearch = publication.Name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      statusFilter === 'all' ||
      (statusFilter === 'active' && publication.IsActive) ||
      (statusFilter === 'inactive' && !publication.IsActive);
    return matchesSearch && matchesStatus;
  });

  return (
    <div className="p-4 max-w-7xl mx-auto min-h-screen">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">Manage Publications</h2>

        <div className="flex flex-col sm:flex-row justify-between mb-6 gap-4">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative flex-grow sm:flex-grow-0 sm:w-64">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FontAwesomeIcon icon={faSearch} className="text-gray-400" />
              </div>
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search publications..."
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div className="relative flex-grow sm:flex-grow-0 sm:w-40">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FontAwesomeIcon icon={faFilter} className="text-gray-400" />
              </div>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value as 'all' | 'active' | 'inactive')}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
              >
                <option value="all">All</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
          </div>
          <button
            onClick={() => {
              setName('');
              setEditingId(null);
              setIsModalOpen(true);
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-200 flex items-center gap-2 shadow-md hover:shadow-lg"
          >
            <FontAwesomeIcon icon={faPlus} /> Add Publication
          </button>
        </div>

        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out">
            <div
              ref={modalRef}
              className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-md transform transition-all duration-300 ease-out scale-95 animate-in fade-in-90 slide-in-from-bottom-10"
            >
              <h3 className="text-xl font-bold text-gray-800 mb-4">{editingId ? 'Edit Publication' : 'Add Publication'}</h3>
              <form onSubmit={handleSubmit}>
                <div className="mb-4">
                  <label htmlFor="publicationName" className="block text-sm font-medium text-gray-700 mb-1">
                    Publication Name
                  </label>
                  <input
                    id="publicationName"
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Enter publication name"
                    className="p-3 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div className="flex justify-end gap-3">
                  <button
                    type="button"
                    onClick={() => setIsModalOpen(false)}
                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition duration-200 flex items-center gap-2"
                  >
                    <FontAwesomeIcon icon={faArrowLeft} /> Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200 flex items-center gap-2 shadow-md hover:shadow-lg"
                  >
                    {editingId ? (
                      <>
                        <FontAwesomeIcon icon={faEdit} /> Update
                      </>
                    ) : (
                      <>
                        <FontAwesomeIcon icon={faPlus} /> Add
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {isConfirmModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out">
            <div
              ref={confirmModalRef}
              className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 ease-out scale-95 animate-in fade-in-90 slide-in-from-bottom-10"
            >
              <h3 className="text-xl font-bold text-gray-800 mb-4">Confirm Action</h3>
              <p className="text-gray-600 mb-6">
                Are you sure you want to {confirmAction === 'delete' 
                  ? 'delete this publication' 
                  : confirmStatus 
                    ? 'deactivate this publication' 
                    : 'activate this publication'}?
              </p>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setIsConfirmModalOpen(false)}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition duration-200 flex items-center gap-2"
                >
                  <FontAwesomeIcon icon={faArrowLeft} /> Cancel
                </button>
                <button
                  onClick={confirmAction === 'delete' ? handleDelete : handleToggleActive}
                  className={`px-4 py-2 text-white rounded-lg transition duration-200 flex items-center gap-2 shadow-md hover:shadow-lg ${
                    confirmAction === 'delete' 
                      ? 'bg-red-600 hover:bg-red-700' 
                      : confirmStatus 
                        ? 'bg-amber-600 hover:bg-amber-700' 
                        : 'bg-green-600 hover:bg-green-700'
                  }`}
                >
                  <FontAwesomeIcon icon={confirmAction === 'delete' ? faTrash : confirmStatus ? faEyeSlash : faEye} /> 
                  {confirmAction === 'delete' ? 'Delete' : confirmStatus ? 'Deactivate' : 'Activate'}
                </button>
              </div>
            </div>
          </div>
        )}

        <div className="overflow-x-auto rounded-lg border border-gray-200">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={4} className="px-6 py-8 text-center">
                    <div className="flex justify-center">
                      <FontAwesomeIcon 
                        icon={faSpinner} 
                        className="animate-spin h-8 w-8 text-blue-500" 
                      />
                    </div>
                  </td>
                </tr>
              ) : tableLoading ? (
                <tr>
                  <td colSpan={4} className="px-6 py-4 text-center">
                    <div className="flex justify-center">
                      <FontAwesomeIcon 
                        icon={faSpinner} 
                        className="animate-spin h-5 w-5 text-blue-500" 
                      />
                      <span className="ml-2 text-gray-600">Loading publications...</span>
                    </div>
                  </td>
                </tr>
              ) : filteredPublications.length === 0 ? (
                <tr>
                  <td colSpan={4} className="px-6 py-4 text-center text-gray-500">
                    No publications found
                  </td>
                </tr>
              ) : (
                filteredPublications.map((publication) => (
                  <tr key={publication.PubId} className="hover:bg-gray-50 transition-colors duration-150">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{publication.PubId}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{publication.Name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        publication.IsActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {publication.IsActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEdit(publication)}
                          className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                          title="Edit"
                        >
                          <FontAwesomeIcon icon={faEdit} />
                        </button>
                        <button
                          onClick={() => openConfirmModal('delete', publication.PubId)}
                          className="text-red-600 hover:text-red-900 transition-colors duration-200"
                          title="Delete"
                        >
                          <FontAwesomeIcon icon={faTrash} />
                        </button>
                        <button
                          onClick={() => openConfirmModal('toggle', publication.PubId, publication.IsActive)}
                          className={`transition-colors duration-200 ${
                            publication.IsActive 
                              ? 'text-amber-600 hover:text-amber-900' 
                              : 'text-green-600 hover:text-green-900'
                          }`}
                          title={publication.IsActive ? 'Deactivate' : 'Activate'}
                        >
                          <FontAwesomeIcon icon={publication.IsActive ? faEyeSlash : faEye} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default PublicationsPage;
-----------------------------------------------------------------------------------------
import { NextRequest, NextResponse } from 'next/server';
import { getConnection } from '@/app/lib/db';
import logger from '@/app/lib/logger';

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const search = searchParams.get('search') || '';
    const status = searchParams.get('status') || 'all';

    const pool = await getConnection();
    let query = 'SELECT * FROM Publication WHERE Name LIKE @search';
    const params: any = { search: `%${search}%` };

    if (status !== 'all') {
      query += ' AND IsActive = @isActive';
      params.isActive = status === 'active' ? 1 : 0;
    }

    const result = await pool.request().input('search', params.search).input('isActive', params.isActive).query(query);
    return NextResponse.json(result.recordset);
  } catch (error) {
    logger.error(`Error fetching publications: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const { Name, IsActive, CreatedBy } = await req.json();
    const pool = await getConnection();
    await pool
      .request()
      .input('Name', Name)
      .input('IsActive', IsActive)
      .input('CreatedBy', CreatedBy)
      .query('INSERT INTO Publication (Name, IsActive, CreatedBy, CreatedAt) VALUES (@Name, @IsActive, @CreatedBy, GETDATE())');
    return NextResponse.json({ message: 'Publication added' });
  } catch (error) {
    logger.error(`Error adding publication: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function PUT(req: NextRequest) {
  try {
    const { PubId, Name, IsActive, UpdatedBy } = await req.json();
    if (!PubId || UpdatedBy === undefined) {
      return NextResponse.json({ message: 'PubId and UpdatedBy are required' }, { status: 400 });
    }

    const pool = await getConnection();
    await pool
      .request()
      .input('PubId', PubId)
      .input('Name', Name)
      .input('IsActive', IsActive)
      .input('UpdatedBy', UpdatedBy)
      .query('UPDATE Publication SET Name = @Name, IsActive = @IsActive, UpdatedBy = @UpdatedBy, UpdatedAt = GETDATE() WHERE PubId = @PubId');
    return NextResponse.json({ message: 'Publication updated' });
  } catch (error) {
    logger.error(`Error updating publication: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function DELETE(req: NextRequest) {
  try {
    const { PubId } = await req.json();
    const pool = await getConnection();
    await pool.request().input('PubId', PubId).query('DELETE FROM Publication WHERE PubId = @PubId');
    return NextResponse.json({ message: 'Publication deleted' });
  } catch (error) {
    logger.error(`Error deleting publication: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}
---------------------------------------------------------------------------------------------------------------
import { NextRequest, NextResponse } from 'next/server';
import { getConnection } from '@/app/lib/db';
import logger from '@/app/lib/logger';

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const search = searchParams.get('search') || '';
    const status = searchParams.get('status') || 'all';

    const pool = await getConnection();
    let query = 'SELECT * FROM Subject WHERE Name LIKE @search';
    const params: any = { search: `%${search}%` };

    if (status !== 'all') {
      query += ' AND IsActive = @isActive';
      params.isActive = status === 'active' ? 1 : 0;
    }

    const result = await pool.request().input('search', params.search).input('isActive', params.isActive).query(query);
    return NextResponse.json(result.recordset);
  } catch (error) {
    logger.error(`Error fetching subjects: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const { Name, IsActive, CreatedBy } = await req.json();
    const pool = await getConnection();
    await pool
      .request()
      .input('Name', Name)
      .input('IsActive', IsActive)
      .input('CreatedBy', CreatedBy)
      .query('INSERT INTO Subject (Name, IsActive, CreatedBy, CreatedAt) VALUES (@Name, @IsActive, @CreatedBy, GETDATE())');
    return NextResponse.json({ message: 'Subject added' });
  } catch (error) {
    logger.error(`Error adding subject: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function PUT(req: NextRequest) {
  try {
    const { SubId, Name, IsActive, UpdatedBy } = await req.json();
    const pool = await getConnection();
    await pool
      .request()
      .input('SubId', SubId)
      .input('Name', Name)
      .input('IsActive', IsActive)
      .input('UpdatedBy', UpdatedBy)
      .query('UPDATE Subject SET Name = @Name, IsActive = @IsActive, UpdatedBy = @UpdatedBy, UpdatedAt = GETDATE() WHERE SubId = @SubId');
    return NextResponse.json({ message: 'Subject updated' });
  } catch (error) {
    logger.error(`Error updating subject: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

export async function DELETE(req: NextRequest) {
  try {
    const { SubId } = await req.json();
    const pool = await getConnection();
    await pool.request().input('SubId', SubId).query('DELETE FROM Subject WHERE SubId = @SubId');
    return NextResponse.json({ message: 'Subject deleted' });
  } catch (error) {
    logger.error(`Error deleting subject: ${error}`);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}


---------------------------------------------------------------------------------------------------
'use client';

import { useEffect, useState, useRef } from 'react';
import { toast } from 'react-toastify';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner, faEye, faEyeSlash, faArrowLeft, faPlus, faEdit, faTrash, faSearch, faFilter } from '@fortawesome/free-solid-svg-icons';

interface Subject {
  SubId: number;
  Name: string;
  IsActive: boolean;
  CreatedAt: string;
  CreatedBy: string;
  UpdatedAt?: string;
  UpdatedBy?: string;
}

const SubjectsPage = () => {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [name, setName] = useState('');
  const [editingId, setEditingId] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [confirmAction, setConfirmAction] = useState<'delete' | 'toggle' | null>(null);
  const [confirmId, setConfirmId] = useState<number | null>(null);
  const [confirmStatus, setConfirmStatus] = useState<boolean | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');
  const [loading, setLoading] = useState(true);
  const [tableLoading, setTableLoading] = useState(false);

  const modalRef = useRef<HTMLDivElement>(null);
  const confirmModalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchSubjects();
  }, [searchTerm, statusFilter]);

  useEffect(() => {
    const handleOutsideClick = (e: MouseEvent) => {
      if (isModalOpen && modalRef.current && !modalRef.current.contains(e.target as Node)) {
        setIsModalOpen(false);
      }
      if (isConfirmModalOpen && confirmModalRef.current && !confirmModalRef.current.contains(e.target as Node)) {
        setIsConfirmModalOpen(false);
      }
    };

    if (isModalOpen || isConfirmModalOpen) {
      document.addEventListener('mousedown', handleOutsideClick);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
      document.body.style.overflow = 'auto';
    };
  }, [isModalOpen, isConfirmModalOpen]);

  const fetchSubjects = async () => {
    setTableLoading(true);
    try {
      const params = { search: searchTerm, status: statusFilter };
      const res = await axios.get('/api/subject', { params });
      setSubjects(res.data);
    } catch (error) {
      toast.error('Failed to fetch subjects');
    } finally {
      setLoading(false);
      setTableLoading(false);
    }
  };

  const sanitizeAndFormatName = (input: string) => {
    return input
      .trim()
      .replace(/[^a-zA-Z0-9 &]/g, '')
      .toUpperCase();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const formattedName = sanitizeAndFormatName(name);
    if (!formattedName) {
      toast.error('Please enter a valid subject name');
      return;
    }

    try {
      const payload = {
        Name: formattedName,
        IsActive: true,
        CreatedBy: 'admin',
        ...(editingId && { SubId: editingId, UpdatedBy: 'admin' }),
      };

      const res = await axios({
        method: editingId ? 'put' : 'post',
        url: '/api/subject',
        data: payload,
      });

      toast.success(editingId ? 'Subject updated' : 'Subject added');
      setName('');
      setEditingId(null);
      setIsModalOpen(false);
      fetchSubjects();
    } catch (error) {
      toast.error('An error occurred');
    }
  };

  const handleEdit = (subject: Subject) => {
    setName(subject.Name);
    setEditingId(subject.SubId);
    setIsModalOpen(true);
  };

  const handleDelete = async () => {
    if (!confirmId) return;
    try {
      await axios.delete('/api/subject', { data: { SubId: confirmId } });
      toast.success('Subject deleted');
      setIsConfirmModalOpen(false);
      fetchSubjects();
    } catch (error) {
      toast.error('An error occurred');
    }
  };

  const handleToggleActive = async () => {
    if (!confirmId || confirmStatus === null) return;
    try {
      const subject = subjects.find(s => s.SubId === confirmId);
      if (!subject) throw new Error('Subject not found');

      await axios.put('/api/subject', {
        SubId: confirmId,
        Name: subject.Name,
        IsActive: !confirmStatus,
        UpdatedBy: 'admin',
      });
      toast.success(`Subject ${confirmStatus ? 'deactivated' : 'activated'}`);
      setIsConfirmModalOpen(false);
      fetchSubjects();
    } catch (error: any) {
      const errorMsg = error.response?.data?.message || 'An error occurred';
      toast.error(errorMsg);
    }
  };

  const openConfirmModal = (action: 'delete' | 'toggle', id: number, status?: boolean) => {
    setConfirmAction(action);
    setConfirmId(id);
    setConfirmStatus(status ?? null);
    setIsConfirmModalOpen(true);
  };

  const filteredSubjects = subjects.filter((subject) => {
    const matchesSearch = subject.Name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      statusFilter === 'all' ||
      (statusFilter === 'active' && subject.IsActive) ||
      (statusFilter === 'inactive' && !subject.IsActive);
    return matchesSearch && matchesStatus;
  });

  return (
    <div className="p-3 max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-sm p-4">
        <h2 className="text-xl font-semibold mb-3 text-gray-800">Manage Subjects</h2>

        <div className="flex flex-col sm:flex-row justify-between mb-3 gap-2">
          <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
            <div className="relative flex-grow sm:flex-grow-0 sm:w-56">
              <div className="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                <FontAwesomeIcon icon={faSearch} className="text-gray-400 text-sm" />
              </div>
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search subjects..."
                className="pl-8 pr-2 py-1.5 text-sm border border-gray-300 rounded w-full focus:outline-none focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div className="relative flex-grow sm:flex-grow-0 sm:w-36">
              <div className="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                <FontAwesomeIcon icon={faFilter} className="text-gray-400 text-sm" />
              </div>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value as 'all' | 'active' | 'inactive')}
                className="pl-8 pr-2 py-1.5 text-sm border border-gray-300 rounded w-full focus:outline-none focus:ring-1 focus:ring-blue-500"
              >
                <option value="all">All</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
          </div>
          <button
            onClick={() => {
              setName('');
              setEditingId(null);
              setIsModalOpen(true);
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-1.5 px-3 rounded flex items-center gap-1"
          >
            <FontAwesomeIcon icon={faPlus} size="xs" /> Add Subject
          </button>
        </div>

        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-3 z-50">
            <div
              ref={modalRef}
              className="bg-white rounded-lg shadow-md p-4 w-full max-w-sm"
            >
              <h3 className="text-lg font-semibold mb-3">{editingId ? 'Edit Subject' : 'Add Subject'}</h3>
              <form onSubmit={handleSubmit}>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Subject Name"
                  className="p-2 text-sm border border-gray-300 rounded w-full mb-3 focus:outline-none focus:ring-1 focus:ring-blue-500"
                  required
                />
                <div className="flex justify-end gap-2">
                  <button
                    type="button"
                    onClick={() => setIsModalOpen(false)}
                    className="text-sm bg-gray-200 text-gray-800 py-1.5 px-3 rounded hover:bg-gray-300 flex items-center gap-1"
                  >
                    <FontAwesomeIcon icon={faArrowLeft} size="xs" /> Cancel
                  </button>
                  <button
                    type="submit"
                    className="text-sm bg-blue-600 text-white py-1.5 px-3 rounded hover:bg-blue-700 flex items-center gap-1"
                  >
                    {editingId ? (
                      <>
                        <FontAwesomeIcon icon={faEdit} size="xs" /> Update
                      </>
                    ) : (
                      <>
                        <FontAwesomeIcon icon={faPlus} size="xs" /> Add
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {isConfirmModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-3 z-50">
            <div
              ref={confirmModalRef}
              className="bg-white rounded-lg shadow-md p-4 w-full max-w-xs"
            >
              <h3 className="text-lg font-semibold mb-2">Confirm Action</h3>
              <p className="text-sm text-gray-600 mb-3">
                {confirmAction === 'delete' 
                  ? 'Delete this subject?' 
                  : confirmStatus 
                    ? 'Deactivate this subject?' 
                    : 'Activate this subject?'}
              </p>
              <div className="flex justify-end gap-2">
                <button
                  onClick={() => setIsConfirmModalOpen(false)}
                  className="text-sm bg-gray-200 text-gray-800 py-1.5 px-3 rounded hover:bg-gray-300 flex items-center gap-1"
                >
                  <FontAwesomeIcon icon={faArrowLeft} size="xs" /> Cancel
                </button>
                <button
                  onClick={confirmAction === 'delete' ? handleDelete : handleToggleActive}
                  className={`text-sm text-white py-1.5 px-3 rounded flex items-center gap-1 ${
                    confirmAction === 'delete' 
                      ? 'bg-red-600 hover:bg-red-700' 
                      : confirmStatus 
                        ? 'bg-amber-600 hover:bg-amber-700' 
                        : 'bg-green-600 hover:bg-green-700'
                  }`}
                >
                  <FontAwesomeIcon 
                    icon={confirmAction === 'delete' ? faTrash : confirmStatus ? faEyeSlash : faEye} 
                    size="xs" 
                  /> 
                  {confirmAction === 'delete' ? 'Delete' : confirmStatus ? 'Deactivate' : 'Activate'}
                </button>
              </div>
            </div>
          </div>
        )}

        <div className="overflow-x-auto rounded border border-gray-200">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={4} className="px-3 py-4 text-center">
                    <FontAwesomeIcon 
                      icon={faSpinner} 
                      className="animate-spin text-blue-500 mx-auto" 
                    />
                  </td>
                </tr>
              ) : tableLoading ? (
                <tr>
                  <td colSpan={4} className="px-3 py-2 text-center text-sm text-gray-600">
                    <div className="flex justify-center items-center gap-2">
                      <FontAwesomeIcon 
                        icon={faSpinner} 
                        className="animate-spin text-blue-500" 
                        size="sm"
                      />
                      Loading...
                    </div>
                  </td>
                </tr>
              ) : filteredSubjects.length === 0 ? (
                <tr>
                  <td colSpan={4} className="px-3 py-2 text-center text-sm text-gray-500">
                    No subjects found
                  </td>
                </tr>
              ) : (
                filteredSubjects.map((subject) => (
                  <tr key={subject.SubId} className="hover:bg-gray-50">
                    <td className="px-3 py-2 whitespace-nowrap text-sm">{subject.SubId}</td>
                    <td className="px-3 py-2 whitespace-nowrap text-sm">{subject.Name}</td>
                    <td className="px-3 py-2 whitespace-nowrap text-sm">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        subject.IsActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {subject.IsActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="px-3 py-2 whitespace-nowrap text-sm">
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleEdit(subject)}
                          className="text-blue-600 hover:text-blue-800 p-1"
                          title="Edit"
                        >
                          <FontAwesomeIcon icon={faEdit} size="sm" />
                        </button>
                        <button
                          onClick={() => openConfirmModal('delete', subject.SubId)}
                          className="text-red-600 hover:text-red-800 p-1"
                          title="Delete"
                        >
                          <FontAwesomeIcon icon={faTrash} size="sm" />
                        </button>
                        <button
                          onClick={() => openConfirmModal('toggle', subject.SubId, subject.IsActive)}
                          className={`p-1 ${
                            subject.IsActive ? 'text-amber-600 hover:text-amber-800' : 'text-green-600 hover:text-green-800'
                          }`}
                          title={subject.IsActive ? 'Deactivate' : 'Activate'}
                        >
                          <FontAwesomeIcon icon={subject.IsActive ? faEyeSlash : faEye} size="sm" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default SubjectsPage;
----------------------------------------------------------------------------------------------------------------





