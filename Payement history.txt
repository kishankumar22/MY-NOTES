1.supplier payment
==================================
	
import React, { useState, useEffect } from 'react';
import { FaEye, FaTimes } from 'react-icons/fa';
import axiosInstance from '../config'; // Adjust path to your axios instance
import PaymentHistoryModal from './PaymentHistoryModal';

interface Supplier {
  SupplierId: number;
  Name: string;
}

interface Expense {
  SuppliersExpenseID: number;
  SupplierId: number;
  SupplierName: string;
  Reason: string;
  ExpenseAmount: number;
  TotalPaid: number;
  RemainingAmount: number;
  Deleted: boolean;
}

interface PaymentHistory {
  ExpensePaymentID: number;
  amount: number;
  mode: string;
  transactionNo: string | null;
  receivedDate: string;
  receivedBy: string;
  createdBy: string;
  createdOn: string;
  paymentImage: string | null;
  comment: string | null;
}

interface SupplierPaymentProps {
  supplier: Supplier;
  onClose: () => void;
}

const SupplierPayment: React.FC<SupplierPaymentProps> = ({ supplier, onClose }) => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [filteredExpenses, setFilteredExpenses] = useState<Expense[]>([]);
  const [totals, setTotals] = useState<{
    TotalExpense: number;
    TotalPaid: number;
    TotalRemaining: number;
  }>({
    TotalExpense: 0,
    TotalPaid: 0,
    TotalRemaining: 0,
  });
  const [statusFilter, setStatusFilter] = useState<'all' | 'paid' | 'unpaid'>('all');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedExpenseId, setSelectedExpenseId] = useState<number | null>(null);
  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([]);
  const [historyLoading, setHistoryLoading] = useState<boolean>(false);

  // Fetch supplier expenses
  useEffect(() => {
    const fetchPayments = async () => {
      setLoading(true);
      try {
        const response = await axiosInstance.get(`/supplier/${supplier.SupplierId}/payments`);
        setExpenses(response.data.expenses);
        setError(null);
      } catch (err) {
        setError('Failed to fetch payments');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchPayments();
  }, [supplier.SupplierId]);

  // Filter expenses and calculate totals based on statusFilter
  useEffect(() => {
    let filtered: Expense[] = expenses;

    if (statusFilter === 'paid') {
      filtered = expenses.filter((expense) => expense.RemainingAmount === 0);
    } else if (statusFilter === 'unpaid') {
      filtered = expenses.filter((expense) => expense.RemainingAmount > 0);
    }

    // Calculate totals based on filtered expenses
    const totalExpense = filtered.reduce((sum, expense) => sum + expense.ExpenseAmount, 0);
    const totalPaid = filtered.reduce((sum, expense) => sum + expense.TotalPaid, 0);
    const totalRemaining = filtered.reduce(
      (sum, expense) => sum + expense.RemainingAmount,
      0
    );

    setFilteredExpenses(filtered);
    setTotals({
      TotalExpense: totalExpense,
      TotalPaid: totalPaid,
      TotalRemaining: totalRemaining,
    });
  }, [expenses, statusFilter]);

  // Fetch payment history for a specific expense
  const fetchPaymentHistory = async (expenseId: number) => {
    setHistoryLoading(true);
    try {
      const response = await axiosInstance.get(`/expense/${supplier.SupplierId}/payments`, {
        params: { suppliersExpenseID: expenseId },
      });
      const history: PaymentHistory[] = response.data.map((payment: any) => ({
        ExpensePaymentID: payment.ExpensePaymentID,
        amount: payment.PaidAmount,
        mode: payment.PaymentMode,
        transactionNo: payment.TransactionId,
        receivedDate: new Date(payment.PaymentDate).toLocaleDateString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit',
        }),
        receivedBy: payment.CreatedBy,
        createdBy: payment.CreatedBy,
        createdOn: new Date(payment.CreatedOn).toLocaleString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }),
        paymentImage: payment.PaymentImage,
        comment: payment.Comment || '',
      }));
      setPaymentHistory(history);
      setHistoryLoading(false);
    } catch (error) {
      setError('Failed to fetch payment history');
      setHistoryLoading(false);
    }
  };

  // Handle clicking the View Payment History button
  const handleViewHistory = (expenseId: number) => {
    setSelectedExpenseId(expenseId);
    fetchPaymentHistory(expenseId);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-99">
      <div className="bg-white dark:bg-gray-900 rounded-xl p-6 w-full max-w-4xl mx-4 shadow-2xl">
        {/* Close Button (Cross Icon) */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4  text-blacck-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 transition"
        >
          <FaTimes className="w-5 h-5" />
        </button>

        {/* Header */}
        <h2 className="text-xl font-semibold mb-6 bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-2 px-4 rounded-md">
          Supplier: {supplier.Name} (ID: {supplier.SupplierId})
        </h2>

        {/* Filter and Totals */}
        <div className="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div className="flex items-center gap-3">
            <label className="text-sm font-medium text-gray-700 dark:text-gray-200">
              Filter Status:
            </label>
            <select
              value={statusFilter}
              onChange={(e) =>
                setStatusFilter(e.target.value as 'all' | 'paid' | 'unpaid')
              }
              className="border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1.5 text-sm bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All</option>
              <option value="paid">Paid</option>
              <option value="unpaid">Unpaid</option>
            </select>
          </div>

          {/* Totals */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 text-sm bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-200">
                Total Expense:
              </span>
              <span className="ml-1 font-semibold text-gray-900 dark:text-white">
                ₹{totals.TotalExpense.toFixed(2)}
              </span>
            </div>
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-200">
                Total Paid:
              </span>
              <span className="ml-1 font-semibold text-blue-600 dark:text-blue-400">
                ₹{totals.TotalPaid.toFixed(2)}
              </span>
            </div>
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-200">
                Total Remaining:
              </span>
              <span className="ml-1 font-semibold text-red-600 dark:text-red-400">
                ₹{totals.TotalRemaining.toFixed(2)}
              </span>
            </div>
          </div>
        </div>

        {/* Expenses Table */}
        <div className="overflow-x-auto rounded-lg shadow-md">
          <table className="min-w-full text-sm bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700">
            <thead>
              <tr className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200">
                <th className="py-3 px-4 text-left font-semibold">Expense ID</th>
                <th className="py-3 px-4 text-left font-semibold">Supplier ID</th>
                <th className="py-3 px-4 text-left font-semibold">Reason</th>
                <th className="py-3 px-4 text-left font-semibold">Expense Amount</th>
                <th className="py-3 px-4 text-left font-semibold">Total Paid</th>
                <th className="py-3 px-4 text-left font-semibold">Remaining</th>
                <th className="py-3 px-4 text-left font-semibold">Status</th>
                <th className="py-3 px-4 text-left font-semibold">Actions</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr>
                  <td colSpan={8} className="py-4 text-center text-gray-600 dark:text-gray-400">
                    Loading...
                  </td>
                </tr>
              ) : error ? (
                <tr>
                  <td colSpan={8} className="py-4 text-center text-red-600 dark:text-red-400">
                    {error}
                  </td>
                </tr>
              ) : filteredExpenses.length === 0 ? (
                <tr>
                  <td colSpan={8} className="py-4 text-center text-gray-600 dark:text-gray-400">
                    No expenses found
                  </td>
                </tr>
              ) : (
                filteredExpenses.map((expense: Expense) => (
                  <tr
                    key={expense.SuppliersExpenseID}
                    className="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800"
                  >
                    <td className="py-3 px-4">{expense.SuppliersExpenseID}</td>
                    <td className="py-3 px-4">{expense.SupplierId}</td>
                    <td className="py-3 px-4">{expense.Reason}</td>
                    <td className="py-3 px-4">₹{expense.ExpenseAmount.toFixed(2)}</td>
                    <td className="py-3 px-4">₹{expense.TotalPaid.toFixed(2)}</td>
                    <td className="py-3 px-4">₹{expense.RemainingAmount.toFixed(2)}</td>
                    <td className="py-3 px-4">
                      {expense.Deleted ? (
                        <span className="text-red-600 dark:text-red-400">Inactive</span>
                      ) : (
                        <span className="text-green-600 dark:text-green-400">Active</span>
                      )}
                    </td>
                    <td className="py-3 px-4">
                      <button
                        onClick={() => handleViewHistory(expense.SuppliersExpenseID)}
                        className="flex items-center gap-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-xs font-medium"
                        disabled={historyLoading}
                      >
                        <FaEye className="w-4 h-4" />
                        View History
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {/* Cancel Button */}
        <div className="mt-6 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 transition"
          >
            Cancel
          </button>
        </div>

        {/* Payment History Modal */}
        <PaymentHistoryModal
          isOpen={!!selectedExpenseId}
          onClose={() => setSelectedExpenseId(null)}
          paymentHistory={paymentHistory}
          supplierName={supplier.Name}
          expenseId={selectedExpenseId}
        />
      </div>
    </div>
  );
};

export default SupplierPayment;
==========================
2.paymenthstory

import React from 'react';
import { FaTimes } from 'react-icons/fa';

interface PaymentHistory {
  ExpensePaymentID: number;
  amount: number;
  mode: string;
  transactionNo: string | null;
  receivedDate: string;
  receivedBy: string;
  createdBy: string;
  createdOn: string;
  paymentImage: string | null;
  comment: string | null;
}

interface PaymentHistoryModalProps {
  isOpen: boolean;
  onClose: () => void;
  paymentHistory: PaymentHistory[];
  supplierName: string;
  expenseId: number | null;
}

const PaymentHistoryModal: React.FC<PaymentHistoryModalProps> = ({
  isOpen,
  onClose,
  paymentHistory,
  supplierName,
  expenseId,
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 transition-opacity duration-300">
      <div className="bg-white dark:bg-gray-900 rounded-xl p-6 w-full max-w-4xl mx-2 shadow-lg relative">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 transition duration-150"
        >
          <FaTimes className="w-5 h-5" />
        </button>

        {/* Header */}
        <h3 className="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-100">
          Payment History for Expense ID: {expenseId} ({supplierName})
        </h3>

        {/* Payment History Table */}
        <div className="overflow-x-auto rounded-lg shadow-md">
          <table className="min-w-full text-xs bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700">
            <thead>
              <tr className="bg-indigo-600 text-white">
                {[
                  'Amount',
                  'Mode',
                  'Trans #',
                  'Received Date',
                  'Received By',
                  'Created By',
                  'Created On',
                  'Comment',
                  'Payment Slip',
                ].map((title) => (
                  <th
                    key={title}
                    className="py-2 px-3 text-left font-semibold whitespace-nowrap"
                  >
                    {title}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {paymentHistory.length > 0 ? (
                paymentHistory.map((history, index) => (
                  <tr
                    key={history.ExpensePaymentID}
                    className={`border-b border-gray-200 dark:border-gray-700 transition duration-150 ${
                      index % 2 === 0
                        ? 'bg-gray-50 dark:bg-gray-800'
                        : 'bg-white dark:bg-gray-900'
                    } hover:bg-indigo-50 dark:hover:bg-gray-700`}
                  >
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      ₹{history.amount.toFixed(2)}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.mode}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.transactionNo || '-'}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.receivedDate}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.receivedBy}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.createdBy}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.createdOn}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.comment || '-'}
                    </td>
                    <td className="py-2 px-3 text-gray-800 dark:text-gray-200 whitespace-nowrap">
                      {history.paymentImage ? (
                        <a
                          href={history.paymentImage}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline"
                        >
                          View Slip
                        </a>
                      ) : (
                        '-'
                      )}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={9}
                    className="py-3 text-center text-gray-600 dark:text-gray-400 text-xs"
                  >
                    No payment history available
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default PaymentHistoryModal;
===========================================================
3.expenspayent
import React, { useState, useEffect } from 'react';
import { FaTimes, FaMoneyBillWave, FaSpinner } from 'react-icons/fa';
import { Eye, EyeOff, Lock } from 'lucide-react';
import { toast } from 'react-toastify';
import axiosInstance from '../config';
import { useAuth } from '../context/AuthContext';

interface ExpensePaymentProps {
  expense: {
    SupplierId: number;
    SupplierName: string;
    Amount: number;
    SuppliersExpenseID: number;
  };
  onClose: () => void;
  onSuccess: () => void;
  createdBy: string;
  searchInputRef?: React.RefObject<HTMLInputElement>;
}

interface PaymentHistory {
  ExpensePaymentID: number;
  amount: number;
  mode: string;
  transactionNo: string;
  receivedDate: string;
  receivedBy: string;
  createdBy: string;
  createdOn: string;
  paymentImage: string;
  comment: string | null;
}

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  footer: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, footer }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 w-full max-w-md mx-2 shadow-lg">
        <div className="flex justify-between items-center mb-3">
          <h3 className="text-sm font-semibold text-gray-800 dark:text-gray-100">{title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700 dark:text-gray-400">
            <FaTimes className="w-4 h-4" />
          </button>
        </div>
        <div>{children}</div>
        <div className="mt-3">{footer}</div>
      </div>
    </div>
  );
};

const RequiredAsterisk = () => <span className="text-red-500">*</span>;

const ExpensePayment: React.FC<ExpensePaymentProps> = ({
  expense,
  onClose,
  onSuccess,
  createdBy,
  searchInputRef,
}) => {
  const { user } = useAuth();
  const modifiedBy = user?.name || 'admin';
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([]);
  const [totalPaidAmount, setTotalPaidAmount] = useState<number>(0);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [password, setPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [isPasswordVerified, setIsPasswordVerified] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [paymentData, setPaymentData] = useState({
    paymentAmount: '',
    paymentDate: new Date().toISOString().split('T')[0],
    paymentMethod: '',
    transactionNo: '',
    file: null as File | null,
    comment: '',
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const totalAmount = expense.Amount;
  const remainingAmount = totalAmount - totalPaidAmount;

  const fetchPaymentHistory = async () => {
    try {
      const response = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
        params: {
          suppliersExpenseID: expense.SuppliersExpenseID, // Pass SuppliersExpenseID as query parameter
        },
      });
      const history: PaymentHistory[] = response.data.map((payment: any) => ({
        ExpensePaymentID: payment.ExpensePaymentID,
        amount: payment.PaidAmount,
        mode: payment.PaymentMode,
        transactionNo: payment.TransactionId,
        receivedDate: new Date(payment.PaymentDate).toLocaleDateString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit',
        }),
        receivedBy: payment.CreatedBy,
        createdBy: payment.CreatedBy,
        createdOn: new Date(payment.CreatedOn).toLocaleString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }),
        paymentImage: payment.PaymentImage,
        comment: payment.Comment || '',
      }));
      setPaymentHistory(history);
      const totalPaid = history.reduce((sum, payment) => sum + payment.amount, 0);
      setTotalPaidAmount(totalPaid);
    } catch (error) {
      toast.error('Failed to fetch payment history');
    }
  };

  useEffect(() => {
    fetchPaymentHistory();
  }, [expense.SupplierId, expense.SuppliersExpenseID]); // Added SuppliersExpenseID to dependency array

  const getTransactionLabel = () => {
    switch (paymentData.paymentMethod) {
      case 'Cheque':
        return 'Cheque Transaction No.';
      case 'Bank Transfer':
        return 'Bank Transaction No.';
      default:
        return 'Transaction No.';
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!paymentData.paymentAmount) {
      newErrors.paymentAmount = 'Payment amount is required';
    } else if (parseFloat(paymentData.paymentAmount) <= 0) {
      newErrors.paymentAmount = 'Payment amount must be greater than 0';
    } else if (parseFloat(paymentData.paymentAmount) > remainingAmount) {
      newErrors.paymentAmount = 'Payment amount cannot exceed remaining amount';
    }

    if (!paymentData.paymentDate) {
      newErrors.paymentDate = 'Payment date is required';
    }

    if (!paymentData.paymentMethod) {
      newErrors.paymentMethod = 'Payment method is required';
    }

    if (paymentData.paymentMethod !== 'Cash' && !paymentData.transactionNo) {
      newErrors.transactionNo = `${getTransactionLabel()} is required`;
    } else if (paymentData.paymentMethod !== 'Cash' && paymentData.transactionNo) {
      const isDuplicate = paymentHistory.some(
        (payment) => payment.transactionNo === paymentData.transactionNo
      );
      if (isDuplicate) {
        newErrors.transactionNo = 'This transaction number already exists';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    if (name === 'paymentMethod') {
      setPaymentData((prev) => ({
        ...prev,
        paymentMethod: value,
        transactionNo: value === 'Cash' ? '' : prev.transactionNo,
      }));
    } else {
      setPaymentData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
    setErrors((prev) => ({ ...prev, [name]: '' }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    setPaymentData((prev) => ({ ...prev, file }));
    e.target.value = '';
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
    setPasswordError('');
  };

  const handleCancelPassword = () => {
    setShowPasswordModal(false);
    setPassword('');
    setPasswordError('');
    setIsPasswordVerified(false);
  };

  const handleSubmitWithPassword = async () => {
    if (!password) {
      setPasswordError('Password is required');
      return;
    }

    setIsSubmitting(true);
    try {
      const verifyRes = await axiosInstance.post('/verify-password', {
        userId: user?.user_id,
        password: password,
      });

      if (!verifyRes.data.success) {
        setPasswordError('Invalid credentials');
        setIsSubmitting(false);
        return;
      }

      setIsPasswordVerified(true);
      setShowPasswordModal(false);
      setPassword('');
      setPasswordError('');
      await submitPayment();
    } catch (error) {
      setPasswordError('Failed to verify password');
      setIsSubmitting(false);
    }
  };

  const submitPayment = async () => {
    setIsSubmitting(true);
    try {
      const formData = new FormData();
      formData.append('supplierId', expense.SupplierId.toString());
      formData.append('suppliersExpenseID', expense.SuppliersExpenseID.toString());
      formData.append('paidAmount', paymentData.paymentAmount);
      formData.append('paymentMode', paymentData.paymentMethod);
      formData.append('transactionId', paymentData.paymentMethod === 'Cash' ? '' : paymentData.transactionNo);
      formData.append('paymentDate', paymentData.paymentDate);
      formData.append('isApproved', 'true');
      formData.append('approveBy', modifiedBy);
      formData.append('comment', paymentData.comment || '');
      formData.append('createdBy', createdBy);
      if (paymentData.file) {
        formData.append('file', paymentData.file);
      }

      const response = await axiosInstance.post('/expense/payment', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast.success(`Payment of ₹${paymentData.paymentAmount} processed for ${expense.SupplierName}`);
        if (searchInputRef?.current) {
          searchInputRef.current.blur();
          searchInputRef.current.value = '';
        }
        onSuccess();
        onClose();
      } else {
        toast.error(response.data.message || 'Failed to process payment');
      }
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Failed to process payment');
    } finally {
      setIsSubmitting(false);
      if (searchInputRef?.current) {
        searchInputRef.current.blur();
        searchInputRef.current.value = '';
      }
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    if (searchInputRef?.current) {
      searchInputRef.current.blur();
      searchInputRef.current.value = '';
    }

    setShowPasswordModal(true);
  };

  const isFormValid = () => {
    return (
      paymentData.paymentAmount &&
      parseFloat(paymentData.paymentAmount) > 0 &&
      paymentData.paymentDate &&
      paymentData.paymentMethod &&
      (paymentData.paymentMethod === 'Cash' || (paymentData.transactionNo && !errors.transactionNo))
    );
  };

  const PasswordVerificationModal = () => {
    const [localPasswordError, setLocalPasswordError] = useState('');

    useEffect(() => {
      if (passwordError) {
        setLocalPasswordError(passwordError);
        const timer = setTimeout(() => {
          setLocalPasswordError('');
        }, 3000);
        return () => clearTimeout(timer);
      }
    }, [passwordError]);

    const modalFooter = (
      <div className="flex justify-end space-x-1">
        <button
          type="button"
          onClick={handleCancelPassword}
          className="px-2 py-0.5 border border-gray-300 rounded-md text-xs font-medium text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
          disabled={isSubmitting}
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-2 py-0.5 bg-blue-600 text-white rounded-md text-xs font-medium hover:bg-blue-700 disabled:bg-blue-300"
          disabled={isSubmitting}
          onClick={handleSubmitWithPassword}
        >
          {isSubmitting ? 'Verifying...' : 'Verify & Submit'}
        </button>
      </div>
    );

    return (
      <Modal
        isOpen={showPasswordModal}
        onClose={handleCancelPassword}
        title="Verify Payment Approval"
        footer={modalFooter}
      >
        <div className="mb-2">
          <div className="bg-blue-50 p-2 rounded-md mb-2">
            <p className="text-xs text-blue-800">
              Approving payment of ₹{parseFloat(paymentData.paymentAmount || '0').toLocaleString('en-US')} for {expense.SupplierName}. Verify with your password.
            </p>
          </div>
          <label className="block text-xs font-medium text-gray-700 dark:text-gray-200 mb-1">
            Password <RequiredAsterisk />
          </label>
          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={handlePasswordChange}
              className={`w-full border ${localPasswordError ? 'border-red-300' : 'border-gray-300'} rounded-md px-2 py-1 text-xs pr-12 dark:bg-gray-700 dark:border-gray-600 dark:text-white`}
              placeholder="Enter password"
              required
              autoFocus
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-2">
              <button
                type="button"
                className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 mr-2 focus:outline-none"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
              </button>
              <Lock className="h-3 w-3 text-gray-400" />
            </div>
          </div>
          {localPasswordError && (
            <p className="mt-1 text-xs text-red-600 transition-opacity duration-300">
              {localPasswordError}
            </p>
          )}
        </div>
      </Modal>
    );
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 transition-opacity duration-300">
      <div className="bg-white dark:bg-gray-900 rounded-xl p-3 w-full max-w-4xl mx-2 transform transition-all duration-300 scale-95 sm:scale-100 shadow-lg relative">
        <button
          onClick={onClose}
          className="absolute top-2 right-2 mt-1 text-black hover:text-red-700 dark:text-gray-400 dark:hover:text-gray-200 transition duration-150 z-10"
        >
          <FaTimes className="w-6 h-6 mr-3 mt-1" />
        </button>
        <h2 className="text-base sm:text-lg md:text-xl font-semibold mb-4 px-3 py-1 rounded-md bg-gradient-to-r from-blue-400 via-blue-500 to-indigo-500 text-white dark:from-blue-700 dark:via-indigo-700 dark:to-indigo-800 shadow flex items-center gap-2">
          <FaMoneyBillWave className="text-yellow-300 w-5 h-5" />
          <span>Expense Payment Details - {expense.SupplierName}</span>
        </h2>

        <div className="max-h-[70vh] overflow-y-auto pr-1">
          <div className="mb-3">
            <div className="flex flex-col sm:flex-row justify-between items-center bg-blue-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md px-3 py-2 text-sm shadow-sm gap-2 sm:gap-4">
              <div className="text-gray-600 dark:text-gray-300">
                <span className="font-medium">Total Expense Amount:</span>{' '}
                <span className="font-bold text-gray-900 dark:text-white">₹{totalAmount}</span>
              </div>
              <div className="text-gray-600 dark:text-gray-300">
                <span className="font-medium">Total Paid Amount:</span>{' '}
                <span className="font-bold text-blue-600 dark:text-blue-400">₹{totalPaidAmount}</span>
              </div>
              <div className="text-gray-600 dark:text-gray-300">
                <span className="font-medium">Total Remaining Amount:</span>{' '}
                <span className="font-bold text-red-600 dark:text-red-400">₹{remainingAmount}</span>
              </div>
            </div>
          </div>

          <div className="border-t border-gray-200 dark:border-gray-700 pt-2">
            <h3 className="text-md font-semibold bg-blue-100 p-1.5 rounded text-gray-800 dark:text-gray-100 mb-1">
              Payment Information
            </h3>
            <form onSubmit={handleSubmit} className="text-xs">
              <div className="grid grid-cols-2 gap-1.5">
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    Payment Mode <RequiredAsterisk />
                  </label>
                  <select
                    name="paymentMethod"
                    value={paymentData.paymentMethod}
                    onChange={handleInputChange}
                    className={`w-full p-1 text-xs rounded border ${
                      errors.paymentMethod ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                    } focus:ring-1 focus:ring-indigo-500 dark:bg-gray-800 dark:text-white`}
                    required
                  >
                    <option value="">Select payment mode</option>
                    <option value="Cash">Cash</option>
                    <option value="Cheque">Cheque</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                  </select>
                  {errors.paymentMethod && (
                    <p className="text-red-500 text-xs mt-0.5">{errors.paymentMethod}</p>
                  )}
                </div>
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    {getTransactionLabel()} {paymentData.paymentMethod !== 'Cash' && <RequiredAsterisk />}
                  </label>
                  <input
                    type="text"
                    name="transactionNo"
                    value={paymentData.transactionNo}
                    onChange={handleInputChange}
                    className={`w-full p-1 text-xs rounded border ${
                      errors.transactionNo ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                    } focus:ring-1 focus:ring-indigo-500 dark:bg-gray-800 dark:text-white ${
                      paymentData.paymentMethod === 'Cash' ? 'cursor-not-allowed bg-gray-200' : ''
                    }`}
                    disabled={paymentData.paymentMethod === 'Cash'}
                    required={paymentData.paymentMethod !== 'Cash'}
                    title={paymentData.paymentMethod === 'Cash' ? 'Cash does not need transaction no' : ''}
                  />
                  {errors.transactionNo && (
                    <p className="text-red-500 text-xs mt-0.5">{errors.transactionNo}</p>
                  )}
                </div>
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    Amount <RequiredAsterisk />
                  </label>
                  <input
                    type="number"
                    name="paymentAmount"
                    value={paymentData.paymentAmount}
                    onChange={handleInputChange}
                    className={`w-full p-1 text-xs rounded border ${
                      errors.paymentAmount ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                    } focus:ring-1 focus:ring-indigo-500 dark:bg-gray-800 dark:text-white`}
                    required
                  />
                  {errors.paymentAmount && (
                    <p className="text-red-500 text-xs mt-0.5">{errors.paymentAmount}</p>
                  )}
                </div>
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    Payment Date <RequiredAsterisk />
                  </label>
                  <input
                    type="date"
                    name="paymentDate"
                    value={paymentData.paymentDate}
                    onChange={handleInputChange}
                    className={`w-full p-1 text-xs rounded border ${
                      errors.paymentDate ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                    } focus:ring-1 focus:ring-indigo-500 dark:bg-gray-800 dark:text-white`}
                    required
                  />
                  {errors.paymentDate && (
                    <p className="text-red-500 text-xs mt-0.5">{errors.paymentDate}</p>
                  )}
                </div>
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    Comment
                  </label>
                  <textarea
                    name="comment"
                    value={paymentData.comment}
                    onChange={handleInputChange}
                    className="w-full p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-800 dark:text-white"
                    rows={1}
                  />
                </div>
                <div className="mb-1">
                  <label className="flex items-center text-xs font-medium text-black dark:text-gray-200 mb-0.5">
                    Upload Expense Payment File
                    {paymentData.file && (
                      <span className="ml-1 text-xs text-indigo-600 truncate max-w-xs">
                        ({paymentData.file.name})
                      </span>
                    )}
                  </label>
                  <div className="flex items-center">
                    <input
                      type="file"
                      id="expense-payment-file-upload"
                      onChange={handleFileChange}
                      className="hidden"
                    />
                    <button
                      type="button"
                      onClick={() => document.getElementById('expense-payment-file-upload')?.click()}
                      className="px-2 py-0.5 text-xs text-black bg-gray-200 rounded hover:bg-gray-300"
                    >
                      Upload File
                    </button>
                  </div>
                </div>
              </div>
              <div className="flex justify-end gap-1.5 mt-1.5">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-3 py-0.5 text-xs font-medium text-white bg-red-500 rounded hover:bg-red-600"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={!isFormValid() || isSubmitting}
                  className="px-3 py-0.5 text-xs font-medium text-white bg-indigo-500 rounded hover:bg-indigo-600 focus:outline-none focus:ring-1 focus:ring-indigo-500 flex items-center gap-1 disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? (
                    <>
                      <FaSpinner className="animate-spin w-3 h-3" />
                      Processing...
                    </>
                  ) : (
                    'Save Payment'
                  )}
                </button>
              </div>
            </form>
          </div>

    <div className="mt-2 border-t border-gray-200 dark:border-gray-700 pt-2">
            <h3 className="text-sm font-semibold text-gray-800 dark:text-gray-100 mb-1">
              Payment History
            </h3>
            <div className="overflow-x-auto rounded-lg shadow-md">
              <table className="min-w-full text-[11px] bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700">
                <thead>
                  <tr className="bg-indigo-600 text-white">
                    {[
                      'Amount',
                      'Mode',
                      'Trans #',
                      'Received Date',
                      'Received By',
                      'Created By',
                      'Created On',
                      'Comment',
                      'Payment Slip',
                    ].map((title) => (
                      <th
                        key={title}
                        className="py-1 px-2 text-left font-semibold whitespace-nowrap"
                      >
                        {title}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {paymentHistory.length > 0 ? (
                    paymentHistory.map((history) => (
                      <tr
                        key={history.ExpensePaymentID}
                        className={`border-b border-gray-200 dark:border-gray-700 transition duration-150 ${
                          paymentHistory.indexOf(history) % 2 === 0
                            ? 'bg-gray-100 dark:bg-gray-800'
                            : 'bg-white dark:bg-gray-900'
                        } hover:bg-indigo-100 dark:hover:bg-gray-700`}
                      >
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          ₹{history.amount}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.mode}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.transactionNo || '-'}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.receivedDate}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.receivedBy}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.createdBy}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.createdOn}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.comment || '-'}
                        </td>
                        <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                          {history.paymentImage ? (
                            <a
                              href={history.paymentImage}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:underline"
                            >
                              View Slip
                            </a>
                          ) : (
                            '-'
                          )}
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td
                        colSpan={9}
                        className="py-2 text-center text-gray-600 dark:text-gray-400 text-xs"
                      >
                        No payment history available
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <PasswordVerificationModal />
    </div>
  );
};

export default ExpensePayment;
========================================
4.mnage expense 

import React, { useState, useEffect, useRef } from 'react';
import Breadcrumb from '../components/Breadcrumbs/Breadcrumb';
import { FaSearch, FaTimes, FaMoneyBillWave, FaEdit, FaToggleOn, FaToggleOff, FaUpload, FaTrash, FaChevronLeft, FaChevronRight, FaEye, FaSpinner } from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import axiosInstance from '../config';
import * as XLSX from 'xlsx';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ExpensePayment from './ExpensePayment';
import { FileSearch } from 'lucide-react';
import DocumentViewerModal from './DocumentViewerModal';

export const RequiredAsterisk = () => <span className="text-red-500">*</span>;

interface Supplier {
  SupplierId: number;
  Name: string;
  Amount: number;
}

interface Document {
  DocumentId: number;
  SupplierId: number;
  DocumentUrl: string;
  PublicId: string;
  CreatedOn: string;
  DocumentType: string;
}

interface Expense {
  SuppliersExpenseID: number;
  SupplierId: number;
  SupplierName: string;
  SupplierEmail: string;
  SupplierPhone: string;
  Reason: string;
  Amount: number;
  Deleted: boolean;
  CreatedOn: string;
  CreatedBy: string;
  ModifiedBy: string | null;
  ModifiedOn: string | null;
  PendingAmount?: number;
}

interface FileWithPreview {
  file: File;
  preview: string;
}

const ManageExpense: React.FC = () => {
  const { user } = useAuth();
  const createdBy = user?.name || 'admin';
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [selectedSupplier, setSelectedSupplier] = useState<{
    SuppliersExpenseID: number; SupplierId: number; SupplierName: string; Amount: number 
  } | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [filteredExpenses, setFilteredExpenses] = useState<Expense[]>([]);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [isDeleting, setIsDeleting] = useState<{ [key: string]: boolean }>({});
  const [viewDocument, setViewDocument] = useState<Document | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [dataFetched, setDataFetched] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [fromDate, setFromDate] = useState<string>('');
  const [toDate, setToDate] = useState<string>('');
  const [paymentStatus, setPaymentStatus] = useState<'All' | 'Paid' | 'Unpaid'>('All');
  const [statusFilter, setStatusFilter] = useState<'All' | 'Active' | 'Inactive'>('All');
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(50);
  const [formData, setFormData] = useState({
    SupplierId: '',
    Reason: '',
    Amount: '',
  });
  const [files, setFiles] = useState<FileWithPreview[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);

  // Set default "To" date to today
  useEffect(() => {
    const today = new Date();
    const formatDate = (date: Date) => date.toISOString().split('T')[0];
    setToDate(formatDate(today));
  }, []);

  // Fetch suppliers and expenses with pending amounts
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        // Fetch suppliers
        const suppliersResponse = await axiosInstance.get('/suppliers');
        setSuppliers(suppliersResponse.data);

        // Fetch expenses
        const expensesResponse = await axiosInstance.get('/expenses');
        const expensesWithPending = await Promise.all(
          expensesResponse.data.map(async (expense: Expense) => {
            try {
              const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
                params: { suppliersExpenseID: expense.SuppliersExpenseID },
              });
              const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
              return { ...expense, PendingAmount: expense.Amount - totalPaid };
            } catch (error) {
              console.error(`Error fetching payments for expense ${expense.SuppliersExpenseID}:`, error);
              return { ...expense, PendingAmount: expense.Amount };
            }
          })
        );
        setExpenses(expensesWithPending);
        setFilteredExpenses(expensesWithPending);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Failed to load data');
        toast.error('Failed to load data');
      } finally {
        setDataFetched(true);
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // Handle search, date range, payment status, and active/inactive filtering
  useEffect(() => {
    if (expenses.length === 0) return;

    setIsLoading(true);
    let filtered = [...expenses];

    if (searchTerm) {
      filtered = filtered.filter((expense) =>
        [expense.SupplierName, expense.SupplierEmail, expense.SupplierPhone]
          .some((field) => field?.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    if (fromDate || toDate) {
      filtered = filtered.filter((expense) => {
        const createdOnDate = new Date(expense.CreatedOn).getTime();
        const from = fromDate ? new Date(fromDate).setHours(0, 0, 0, 0) : -Infinity;
        const to = toDate ? new Date(toDate).setHours(23, 59, 59, 999) : Infinity;
        return createdOnDate >= from && createdOnDate <= to;
      });
    }

    if (paymentStatus !== 'All') {
      filtered = filtered.filter((expense) => {
        const pendingAmount = expense.PendingAmount || 0;
        if (paymentStatus === 'Paid') {
          return pendingAmount <= 0;
        } else if (paymentStatus === 'Unpaid') {
          return pendingAmount > 0;
        }
        return true;
      });
    }

    if (statusFilter !== 'All') {
      filtered = filtered.filter((expense) => {
        if (statusFilter === 'Active') {
          return !expense.Deleted;
        } else if (statusFilter === 'Inactive') {
          return expense.Deleted;
        }
        return true;
      });
    }

    setFilteredExpenses(filtered);
    setCurrentPage(1);
    setTimeout(() => setIsLoading(false), 100);
  }, [searchTerm, fromDate, toDate, paymentStatus, statusFilter, expenses]);

  // Fetch documents when editing an expense
  useEffect(() => {
    if (modalMode === 'edit' && editingExpense) {
      const fetchDocuments = async () => {
        setIsLoading(true);
        try {
          const response = await axiosInstance.get(`/supplier/${editingExpense.SupplierId}/documents`, {
            params: { documentType: 'ExpenseDocument' },
          });
          setDocuments(response.data);
        } catch (error) {
          console.error('Error fetching documents:', error);
          toast.error('Failed to fetch documents', { position: 'top-right', autoClose: 1000 });
        } finally {
          setIsLoading(false);
        }
      };
      fetchDocuments();
    } else {
      setDocuments([]);
    }
  }, [modalMode, editingExpense]);

  // Handle rows per page change
  const handleRowsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newRowsPerPage = parseInt(e.target.value);
    setRowsPerPage(newRowsPerPage);
    setCurrentPage(1);
  };

  const indexOfLastExpense = currentPage * rowsPerPage;
  const indexOfFirstExpense = indexOfLastExpense - rowsPerPage;
  const currentExpenses = filteredExpenses.slice(indexOfFirstExpense, indexOfLastExpense);
  const totalPages = Math.ceil(filteredExpenses.length / rowsPerPage);

  // Calculate metrics based on statusFilter
  const activeFilteredExpenses = filteredExpenses.filter((expense) => !expense.Deleted);
  const displayExpenses = statusFilter === 'Inactive' ? filteredExpenses : activeFilteredExpenses;
  const totalDisplayExpenses = displayExpenses.length;
  const totalDisplayAmount = displayExpenses.reduce((sum, expense) => sum + expense.Amount, 0);
  const totalDisplayPendingAmount = displayExpenses.reduce((sum, expense) => sum + (expense.PendingAmount || 0), 0);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setError(null);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const selectedFiles = Array.from(e.target.files).map((file) => ({
        file,
        preview: URL.createObjectURL(file),
      }));
      setFiles((prev) => [...prev, ...selectedFiles]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const removeFile = (index: number) => {
    setFiles((prev) => {
      const updatedFiles = prev.filter((_, i) => i !== index);
      URL.revokeObjectURL(prev[index].preview);
      return updatedFiles;
    });
  };

  const handleDeleteDocument = async (publicId: string) => {
    setIsDeleting((prev) => ({ ...prev, [publicId]: true }));
    try {
      const response = await axiosInstance.delete(`/documents/${publicId}`);
      setDocuments((prev) => prev.filter((doc) => doc.PublicId !== publicId));
      toast.success('Document deleted successfully', { position: 'top-right', autoClose: 3000 });
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Failed to delete document';
      toast.error(errorMessage, { position: 'top-right', autoClose: 3000 });
    } finally {
      setIsDeleting((prev) => ({ ...prev, [publicId]: false }));
    }
  };

  const handleViewDocument = (doc: Document) => {
    setViewDocument(doc);
  };

  const openEditModal = (expense: Expense) => {
    if (expense.Deleted) {
      toast.warning('Expense is inactive. Please activate to edit or make payment.', {
        position: 'top-right',
        autoClose: 3000,
      });
      return;
    }
    setEditingExpense(expense);
    setModalMode('edit');
    setFormData({
      SupplierId: expense.SupplierId.toString(),
      Reason: expense.Reason,
      Amount: expense.Amount.toString(),
    });
    setFiles([]);
    setError(null);
    setSuccess(null);
    setIsModalOpen(true);
  };

  const openPaymentModal = (expense: Expense) => {
    if (expense.Deleted) {
      toast.warning('Expense is inactive. Please activate to edit or make payment.', {
        position: 'top-right',
        autoClose: 1500,
      });
      return;
    }
    const supplier = suppliers.find((s) => s.SupplierId === expense.SupplierId);
    if (supplier) {
      setSelectedSupplier({
        SuppliersExpenseID: expense.SuppliersExpenseID,
        SupplierId: supplier.SupplierId,
        SupplierName: supplier.Name,
        Amount: expense.Amount,
      });
      setIsPaymentModalOpen(true);
    } else {
      toast.error('Supplier not found');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (!formData.SupplierId || !formData.Reason || !formData.Amount) {
      setError('Please fill all required fields');
      return;
    }

    if (parseFloat(formData.Amount) <= 0) {
      setError('Amount must be greater than 0');
      return;
    }

    try {
      const formDataToSend = new FormData();
      formDataToSend.append('SupplierId', formData.SupplierId);
      formDataToSend.append('Reason', formData.Reason);
      formDataToSend.append('Amount', formData.Amount);
      const userName = createdBy;

      if (modalMode === 'add') {
        formDataToSend.append('CreatedBy', userName);
      } else {
        formDataToSend.append('ModifiedBy', userName);
      }

      files.forEach((fileObj) => {
        formDataToSend.append('files', fileObj.file);
      });

      const url = modalMode === 'add' ? '/expenses' : `/expenses/${editingExpense?.SuppliersExpenseID}`;
      const method = modalMode === 'add' ? 'post' : 'put';

      const response = await axiosInstance[method](url, formDataToSend, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      toast.success(response.data.message, { position: 'top-right', autoClose: 2000 });
      setFormData({ SupplierId: '', Reason: '', Amount: '' });
      setFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
      setIsModalOpen(false);
      setEditingExpense(null);
      setModalMode('add');
      setDocuments([]);

      const expensesResponse = await axiosInstance.get('/expenses');
      const expensesWithPending = await Promise.all(
        expensesResponse.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || `Failed to ${modalMode === 'add' ? 'add' : 'update'} expense`;
      setError(errorMessage);
      toast.error(errorMessage, { position: 'top-right', autoClose: 1500 });
    }
  };

  const handleToggleDeleted = async (expense: Expense) => {
    try {
      const response = await axiosInstance.patch(`/expenses/${expense.SuppliersExpenseID}/toggle`, {
        ModifiedBy: createdBy,
      });
      toast.success(response.data.message);
      const expensesResponse = await axiosInstance.get('/expenses');
      const expensesWithPending = await Promise.all(
        expensesResponse.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || 'Failed to toggle expense';
      toast.error(errorMessage, { position: 'top-right', autoClose: 1500 });
    }
  };

  const handleExportToExcel = () => {
    if (filteredExpenses.length === 0) {
      toast.warning('No data to export to Excel');
      return;
    }
    const worksheetData = filteredExpenses.map((expense) => ({
      'Supplier Name': expense.SupplierName,
      'Email': expense.SupplierEmail,
      'Phone': expense.SupplierPhone,
      'Reason': expense.Reason,
      'Amount (₹)': expense.Amount.toFixed(2),
      'Pending Amount (₹)': (expense.PendingAmount || 0).toFixed(2),
      'Created On': new Date(expense.CreatedOn).toLocaleDateString(),
      'Created By': expense.CreatedBy,
      'Status': expense.Deleted ? 'Inactive' : 'Active',
    }));

    const worksheet = XLSX.utils.json_to_sheet(worksheetData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Expenses');
    XLSX.writeFile(workbook, 'Expenses.xlsx');
    toast.success('Expenses exported to Excel successfully', { position: 'top-right', autoClose: 1500 });
  };

  const handleClearFilters = () => {
    setSearchTerm('');
    const today = new Date();
    const formatDate = (date: Date) => date.toISOString().split('T')[0];
    setFromDate('');
    setToDate(formatDate(today));
    setPaymentStatus('All');
    setStatusFilter('All');
    if (searchInputRef.current) {
      searchInputRef.current.value = '';
      searchInputRef.current.blur();
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setFormData({ SupplierId: '', Reason: '', Amount: '' });
    setFiles([]);
    setError(null);
    setSuccess(null);
    setEditingExpense(null);
    setModalMode('add');
    setDocuments([]);
    if (fileInputRef.current) fileInputRef.current.value = '';
  };

  const closePaymentModal = () => {
    setIsPaymentModalOpen(false);
    setSelectedSupplier(null);
    axiosInstance.get('/expenses').then(async (response) => {
      const expensesWithPending = await Promise.all(
        response.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    }).catch((err) => {
      toast.error('Failed to refresh expenses', { position: 'top-right', autoClose: 1500 });
    });
  };

  const pageNumbers = [];
  const maxPagesToShow = 5;
  const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
  const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }

  return (
    <>
      <Breadcrumb pageName="Manage Expenses" />
      <div className="p-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
        {/* Main Container - Responsive Flex Layout */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2">
          {/* Statistics Section */}
          <div className="flex flex-wrap items-center gap-3 text-xs sm:text-sm">
            {/* Total Expenses */}
            <div className="flex items-center gap-1">
              <FaMoneyBillWave className="text-indigo-600 dark:text-indigo-400 w-3 h-3" />
              <span className="text-gray-600 dark:text-gray-400">Total Expense:</span>
              <span className="font-semibold text-indigo-700 dark:text-indigo-400">
                {isLoading ? '...' : totalDisplayExpenses}
              </span>
            </div>
            {/* Total Amount */}
            <div className="flex items-center gap-1">
              <span className="text-gray-600 dark:text-gray-400">Total Amount:</span>
              <span className="font-semibold text-indigo-700 dark:text-indigo-400">
                {isLoading ? '...' : `₹${totalDisplayAmount.toLocaleString()}`}
              </span>
            </div>
            {/* Pending Amount */}
            <div className="flex items-center gap-1">
              <span className="text-gray-600 dark:text-gray-400">Total Pending:</span>
              <span className="font-semibold text-red-600 dark:text-red-400">
                {isLoading ? '...' : `₹${totalDisplayPendingAmount.toLocaleString()}`}
              </span>
            </div>
          </div>
          {/* Controls Section */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2">
            {/* Search Input */}
            <div className="relative w-full sm:w-auto">
              <FaSearch className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 text-xs" />
              <input
                type="text"
                name="search"
                placeholder="Search by Name, Email, Phone"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                ref={searchInputRef}
                autoComplete="new-search"
                className="w-full sm:w-48 pl-6 pr-2 py-1.5 text-xs rounded-md border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white placeholder:text-xs"
              />
            </div>
            {/* Filter Controls - Responsive Grid */}
            <div className="flex flex-wrap items-center gap-1.5 text-xs">
              {/* Date Range */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">From:</span>
                <input
                  type="date"
                  value={fromDate}
                  onChange={(e) => setFromDate(e.target.value)}
                  className="w-24 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">To:</span>
                <input
                  type="date"
                  value={toDate}
                  onChange={(e) => setToDate(e.target.value)}
                  className="w-24 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              {/* Payment Status */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">Payment:</span>
                <select
                  value={paymentStatus}
                  onChange={(e) => setPaymentStatus(e.target.value as 'All' | 'Paid' | 'Unpaid')}
                  className="w-16 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="All">All</option>
                  <option value="Paid">Paid</option>
                  <option value="Unpaid">Unpaid</option>
                </select>
              </div>
              {/* Status Filter */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">Status:</span>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value as 'All' | 'Active' | 'Inactive')}
                  className="w-16 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="All">All</option>
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
              </div>
              {/* Action Buttons */}
              <div className="flex items-center gap-1">
                <button
                  onClick={handleClearFilters}
                  className="p-1.5 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors focus:outline-none focus:ring-1 focus:ring-gray-400"
                  title="Clear Filters"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
                <button
                  onClick={() => {
                    setModalMode('add');
                    setIsModalOpen(true);
                  }}
                  className="flex items-center gap-1 px-2 py-1.5 text-xs font-medium rounded text-white bg-indigo-600 hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-1 focus:ring-indigo-500"
                >
                  <span className="hidden sm:inline">Add Expense</span>
                  <span className="sm:hidden">Add</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex flex-row items-center justify-between p-2 bg-white my-2 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="flex items-center gap-1">
          <span className="text-xs text-gray-600 dark:text-gray-400">Rows per page:</span>
          <select
            value={rowsPerPage}
            onChange={handleRowsPerPageChange}
            className="p-1 text-xs rounded border border-gray-300 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          >
            <option value={25}>25</option>
            <option value={50}>50</option>
            <option value={75}>75</option>
            <option value={100}>100</option>
          </select>
        </div>
        <button
          onClick={handleExportToExcel}
          className="flex items-center gap-1 px-2 py-1 text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 transition-colors focus:outline-none focus:ring-1 focus:ring-green-500"
        >
          <span>Export to Excel</span>
        </button>
      </div>

      <div className="mt-2">
        <div className="overflow-x-auto rounded-lg shadow-md">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center min-h-[300px] bg-gray-50 border border-gray-200 dark:border-gray-700">
              <FaSpinner className="animate-spin h-8 w-8 text-indigo-600 mb-3" />
              <p className="text-sm font-medium text-gray-600">Loading expenses...</p>
            </div>
          ) : (
            <table className="min-w-full text-[11px] md:text-xs bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700">
              <thead>
                <tr className="bg-indigo-600 text-white">
                  {[
                    'Sr.',
                    'Action',
                    'Supplier',
                    'Phone',
                    'Reason',
                    'Amount',
                    'Pending',
                    'Date',
                    'By',
                    'Status',
                  ].map((title) => (
                    <th key={title} className="py-1 px-2 text-left font-semibold whitespace-nowrap">
                      {title}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {dataFetched && currentExpenses.length === 0 ? (
                  <tr>
                    <td
                      colSpan={10}
                      className="text-center text-gray-600 dark:text-gray-400 text-xs"
                    >
                      <div className="flex flex-col items-center justify-center min-h-[300px] bg-gray-50 border-t border-gray-200">
                        <div className="mb-3">
                          <FileSearch className="h-8 w-8 text-gray-400 animate-pulse" />
                        </div>
                        <p className="text-sm font-medium text-gray-600 mb-1">No Expense records found</p>
                        <p className="text-xs text-gray-400 text-center px-4">
                          Try adjusting your filters or check back later
                        </p>
                      </div>
                    </td>
                  </tr>
                ) : (
                  currentExpenses.map((expense, index) => (
                    <tr
                      key={expense.SuppliersExpenseID}
                      className={`border-b border-gray-200 dark:border-gray-700 transition duration-150 ${
                        expense.Deleted
                          ? 'bg-gray-100 dark:bg-gray-800 opacity-60'
                          : index % 2 === 0
                          ? 'bg-gray-100 dark:bg-gray-800'
                          : 'bg-white dark:bg-gray-900'
                      } hover:bg-indigo-100 dark:hover:bg-gray-700`}
                    >
                      <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                        {indexOfFirstExpense + index + 1}
                      </td>
                      <td className="py-1 px-2 flex gap-2 text-black dark:text-gray-200 whitespace-nowrap">
                        <button
                          onClick={() => openPaymentModal(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-gray-400 cursor-not-allowed'
                              : 'bg-blue-600 hover:bg-blue-700'
                          }`}
                          title="Make Payment"
                        >
                          <FaMoneyBillWave className="w-3 h-3 mr-1" />
                          Pay
                        </button>
                        <button
                          onClick={() => openEditModal(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-gray-400 cursor-not-allowed'
                              : 'bg-yellow-600 hover:bg-yellow-700'
                          }`}
                          title="Edit Expense"
                        >
                          <FaEdit className="w-3 h-3 mr-1" />
                          Edit
                        </button>
                        <button
                          onClick={() => handleToggleDeleted(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-green-600 hover:bg-green-700'
                              : 'bg-red-600 hover:bg-red-700'
                          }`}
                          title={expense.Deleted ? 'Activate' : 'Deactivate'}
                        >
                          {expense.Deleted ? (
                            <FaToggleOff className="w-3 h-3 mr-1" />
                          ) : (
                            <FaToggleOn className="w-3 h-3 mr-1" />
                          )}
                          {expense.Deleted ? 'Active' : 'Inactive'}
                        </button>
                      </td>
                      <td className="px-2 py-1.5 font-medium text-gray-900 dark:text-gray-200">{expense.SupplierName}</td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">{expense.SupplierPhone}</td>
                      <td className="px-1 py-1.5 text-gray-700 dark:text-gray-200 max-w-xs truncate" title={expense.Reason}>
                        {expense.Reason}
                      </td>
                      <td className="px-1.5 py-1.5 text-right font-semibold text-green-600 dark:text-green-400">
                        ₹{expense.Amount.toFixed(2)}
                      </td>
                      <td className="px-1.5 py-1.5 text-right font-semibold text-red-600 dark:text-red-400">
                        ₹{(expense.PendingAmount || 0).toFixed(2)}
                      </td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">
                        {new Date(expense.CreatedOn).toLocaleDateString('en-IN')}
                      </td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">{expense.CreatedBy}</td>
                      <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                        <span
                          className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${
                            expense.Deleted
                              ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'
                              : 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'
                          }`}
                        >
                          {expense.Deleted ? 'Inactive' : 'Active'}
                        </span>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          )}
        </div>

        <div className="flex items-center justify-between mt-4 px-3">
          <div className="text-xs text-gray-600 dark:text-gray-400">
            <span>
              Showing {indexOfFirstExpense + 1} to{' '}
              {Math.min(indexOfLastExpense, filteredExpenses.length)} of{' '}
              {filteredExpenses.length} expenses
            </span>
          </div>
          <nav className="flex items-center space-x-1">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="p-1.5 rounded-md text-gray-600 bg-gray-100 hover:bg-gray-200 disabled:bg-gray-100 disabled:text-gray-400 transition duration-150"
            >
              <FaChevronLeft className="w-4 h-4" />
            </button>
            {startPage > 1 && (
              <>
                <button
                  onClick={() => setCurrentPage(1)}
                  className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition duration-150"
                >
                  1
                </button>
                {startPage > 2 && (
                  <span className="px-2 text-xs text-gray-600">...</span>
                )}
              </>
            )}
            {pageNumbers.map((page) => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`px-3 py-1 text-xs font-medium rounded-md transition duration-150 ${
                  currentPage === page
                    ? 'bg-purple-500 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {page}
              </button>
            ))}
            {endPage < totalPages && (
              <>
                {endPage < totalPages - 1 && (
                  <span className="px-2 text-xs text-gray-600">...</span>
                )}
                <button
                  onClick={() => setCurrentPage(totalPages)}
                  className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition duration-150"
                >
                  {totalPages}
                </button>
              </>
            )}
            <button
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="p-1.5 rounded-md text-gray-600 bg-gray-100 hover:bg-gray-200 disabled:bg-gray-100 disabled:text-gray-400 transition duration-150"
            >
              <FaChevronRight className="w-4 h-4" />
            </button>
          </nav>
        </div>
      </div>

      {/* Add/Edit Expense Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-4 w-full max-w-md">
            <div className="flex justify-between items-center mb-3 pb-2 border-b border-gray-200">
              <h2 className="text-base font-semibold text-gray-800 flex items-center">
                <span className="w-5 h-5 flex items-center justify-center rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white mr-2">
                  {modalMode === 'add' ? '+' : '✎'}
                </span>
                {modalMode === 'add' ? 'Add New Expense' : 'Update Expense'}
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1"
              >
                <FaTimes size={16} />
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-3">
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Supplier <RequiredAsterisk />
                </label>
                <select
                  name="SupplierId"
                  value={formData.SupplierId}
                  onChange={handleInputChange}
                  className="w-full px-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                  required
                >
                  <option value="">Select Supplier</option>
                  {suppliers.map((supplier) => (
                    <option key={supplier.SupplierId} value={supplier.SupplierId}>
                      {supplier.Name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Reason <RequiredAsterisk />
                </label>
                <textarea
                  name="Reason"
                  value={formData.Reason}
                  onChange={handleInputChange}
                  className="w-full px-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                  rows={2}
                  required
                />
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Amount <RequiredAsterisk />
                </label>
                <div className="relative">
                  <span className="absolute inset-y-0 left-0 flex items-center pl-2.5 text-gray-500">₹</span>
                  <input
                    type="number"
                    name="Amount"
                    value={formData.Amount}
                    onChange={handleInputChange}
                    className="w-full pl-6 pr-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                    required
                    min="0"
                    step="0.01"
                  />
                </div>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Upload Files
                  {(files.length > 0 || documents.length > 0) && (
                    <span className="ml-2 text-xs text-indigo-600">
                      ({files.length + documents.length}{' '}
                      {files.length + documents.length === 1 ? 'file' : 'files'})
                    </span>
                  )}
                </label>
                <div className="flex items-center space-x-2">
                  <label className="flex-1 flex items-center justify-center px-2.5 py-1.5 border border-gray-300 border-dashed rounded-md bg-gray-50 hover:bg-gray-100 cursor-pointer">
                    <FaUpload className="mr-1.5 text-gray-400" size={14} />
                    <span className="text-xs text-gray-500">Choose files</span>
                    <input
                      type="file"
                      multiple
                      onChange={handleFileChange}
                      ref={fileInputRef}
                      className="hidden"
                    />
                  </label>
                </div>
              </div>

              {(files.length > 0 || documents.length > 0) && (
                <div className="bg-gray-50 p-2 rounded-md">
                  <h3 className="text-xs font-medium text-gray-700 mb-1.5">Files:</h3>
                  <ul className="space-y-1 max-h-24 overflow-y-auto">
                    {documents.map((doc, index) => (
                      <li
                        key={`doc-${doc.DocumentId}`}
                        className="flex items-center justify-between bg-white p-1.5 rounded-md border border-gray-200 text-xs"
                      >
                        <span className="truncate">{index + 1}. </span>
                        <span className="truncate flex-1">
                          {doc.DocumentUrl.split('/').pop() || 'Document'}
                        </span>
                        <button
                          type="button"
                          onClick={() => handleViewDocument(doc)}
                          className="text-blue-500 hover:text-blue-700 transition duration-150 flex-shrink-0 mr-2"
                          title="View Document"
                        >
                          <FaEye className="w-4 h-4" />
                        </button>
                        <button
                          type="button"
                          onClick={() => handleDeleteDocument(doc.PublicId)}
                          disabled={isDeleting[doc.PublicId]}
                          className="text-red-500 hover:text-red-600 hover:bg-red-50 p-1 rounded-full disabled:opacity-50"
                        >
                          {isDeleting[doc.PublicId] ? (
                            <FaTimes className="animate-spin w-4 h-4" />
                          ) : (
                            <FaTrash size={12} />
                          )}
                        </button>
                      </li>
                    ))}
                    {files.map((fileObj, index) => (
                      <li
                        key={`file-${index}`}
                        className="flex items-center justify-between bg-white p-1.5 rounded-md border border-gray-200 text-xs"
                      >
                        <span className="truncate">{documents.length + index + 1}. </span>
                        <span className="truncate flex-1">{fileObj.file.name}</span>
                        <button
                          type="button"
                          onClick={() => removeFile(index)}
                          className="text-red-500 hover:text-red-600 hover:bg-red-50 p-1 rounded-full"
                        >
                          <FaTrash size={12} />
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-2 rounded">
                  <p className="text-red-700 text-xs">{error}</p>
                </div>
              )}

              {success && (
                <div className="bg-green-50 border-l-4 border-green-500 p-2 rounded">
                  <p className="text-green-700 text-xs">{success}</p>
                </div>
              )}

              <div className="flex justify-end gap-2 pt-2 border-t border-gray-100">
                <button
                  type="button"
                  onClick={closeModal}
                  className="px-3 py-1.5 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-3 py-1.5 text-xs font-medium text-white rounded-md bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-purple-400"
                >
                  {modalMode === 'add' ? 'Save' : 'Update'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Payment Modal */}
      {isPaymentModalOpen && selectedSupplier && (
        <ExpensePayment
          expense={{
            SupplierId: selectedSupplier.SupplierId,
            SupplierName: selectedSupplier.SupplierName,
            Amount: selectedSupplier.Amount,
            SuppliersExpenseID: selectedSupplier.SuppliersExpenseID,
          }}
          onClose={closePaymentModal}
          onSuccess={() => {
            closePaymentModal();
            toast.success('Payment processed successfully', { position: 'top-right', autoClose: 2000 });
          }}
          createdBy={createdBy}
          searchInputRef={searchInputRef}
        />
      )}

      {/* Document Viewer Modal */}
      {viewDocument && (
        <DocumentViewerModal
          document={viewDocument}
          onClose={() => setViewDocument(null)}
        />
      )}
    </>
  );
};

export default ManageExpense;
======================================================
5.backend 
import React, { useState, useEffect, useRef } from 'react';
import Breadcrumb from '../components/Breadcrumbs/Breadcrumb';
import { FaSearch, FaTimes, FaMoneyBillWave, FaEdit, FaToggleOn, FaToggleOff, FaUpload, FaTrash, FaChevronLeft, FaChevronRight, FaEye, FaSpinner } from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import axiosInstance from '../config';
import * as XLSX from 'xlsx';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ExpensePayment from './ExpensePayment';
import { FileSearch } from 'lucide-react';
import DocumentViewerModal from './DocumentViewerModal';

export const RequiredAsterisk = () => <span className="text-red-500">*</span>;

interface Supplier {
  SupplierId: number;
  Name: string;
  Amount: number;
}

interface Document {
  DocumentId: number;
  SupplierId: number;
  DocumentUrl: string;
  PublicId: string;
  CreatedOn: string;
  DocumentType: string;
}

interface Expense {
  SuppliersExpenseID: number;
  SupplierId: number;
  SupplierName: string;
  SupplierEmail: string;
  SupplierPhone: string;
  Reason: string;
  Amount: number;
  Deleted: boolean;
  CreatedOn: string;
  CreatedBy: string;
  ModifiedBy: string | null;
  ModifiedOn: string | null;
  PendingAmount?: number;
}

interface FileWithPreview {
  file: File;
  preview: string;
}

const ManageExpense: React.FC = () => {
  const { user } = useAuth();
  const createdBy = user?.name || 'admin';
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [selectedSupplier, setSelectedSupplier] = useState<{
    SuppliersExpenseID: number; SupplierId: number; SupplierName: string; Amount: number 
  } | null>(null);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [filteredExpenses, setFilteredExpenses] = useState<Expense[]>([]);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [isDeleting, setIsDeleting] = useState<{ [key: string]: boolean }>({});
  const [viewDocument, setViewDocument] = useState<Document | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [dataFetched, setDataFetched] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [fromDate, setFromDate] = useState<string>('');
  const [toDate, setToDate] = useState<string>('');
  const [paymentStatus, setPaymentStatus] = useState<'All' | 'Paid' | 'Unpaid'>('All');
  const [statusFilter, setStatusFilter] = useState<'All' | 'Active' | 'Inactive'>('All');
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(50);
  const [formData, setFormData] = useState({
    SupplierId: '',
    Reason: '',
    Amount: '',
  });
  const [files, setFiles] = useState<FileWithPreview[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);

  // Set default "To" date to today
  useEffect(() => {
    const today = new Date();
    const formatDate = (date: Date) => date.toISOString().split('T')[0];
    setToDate(formatDate(today));
  }, []);

  // Fetch suppliers and expenses with pending amounts
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        // Fetch suppliers
        const suppliersResponse = await axiosInstance.get('/suppliers');
        setSuppliers(suppliersResponse.data);

        // Fetch expenses
        const expensesResponse = await axiosInstance.get('/expenses');
        const expensesWithPending = await Promise.all(
          expensesResponse.data.map(async (expense: Expense) => {
            try {
              const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
                params: { suppliersExpenseID: expense.SuppliersExpenseID },
              });
              const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
              return { ...expense, PendingAmount: expense.Amount - totalPaid };
            } catch (error) {
              console.error(`Error fetching payments for expense ${expense.SuppliersExpenseID}:`, error);
              return { ...expense, PendingAmount: expense.Amount };
            }
          })
        );
        setExpenses(expensesWithPending);
        setFilteredExpenses(expensesWithPending);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Failed to load data');
        toast.error('Failed to load data');
      } finally {
        setDataFetched(true);
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // Handle search, date range, payment status, and active/inactive filtering
  useEffect(() => {
    if (expenses.length === 0) return;

    setIsLoading(true);
    let filtered = [...expenses];

    if (searchTerm) {
      filtered = filtered.filter((expense) =>
        [expense.SupplierName, expense.SupplierEmail, expense.SupplierPhone]
          .some((field) => field?.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    if (fromDate || toDate) {
      filtered = filtered.filter((expense) => {
        const createdOnDate = new Date(expense.CreatedOn).getTime();
        const from = fromDate ? new Date(fromDate).setHours(0, 0, 0, 0) : -Infinity;
        const to = toDate ? new Date(toDate).setHours(23, 59, 59, 999) : Infinity;
        return createdOnDate >= from && createdOnDate <= to;
      });
    }

    if (paymentStatus !== 'All') {
      filtered = filtered.filter((expense) => {
        const pendingAmount = expense.PendingAmount || 0;
        if (paymentStatus === 'Paid') {
          return pendingAmount <= 0;
        } else if (paymentStatus === 'Unpaid') {
          return pendingAmount > 0;
        }
        return true;
      });
    }

    if (statusFilter !== 'All') {
      filtered = filtered.filter((expense) => {
        if (statusFilter === 'Active') {
          return !expense.Deleted;
        } else if (statusFilter === 'Inactive') {
          return expense.Deleted;
        }
        return true;
      });
    }

    setFilteredExpenses(filtered);
    setCurrentPage(1);
    setTimeout(() => setIsLoading(false), 100);
  }, [searchTerm, fromDate, toDate, paymentStatus, statusFilter, expenses]);

  // Fetch documents when editing an expense
  useEffect(() => {
    if (modalMode === 'edit' && editingExpense) {
      const fetchDocuments = async () => {
        setIsLoading(true);
        try {
          const response = await axiosInstance.get(`/supplier/${editingExpense.SupplierId}/documents`, {
            params: { documentType: 'ExpenseDocument' },
          });
          setDocuments(response.data);
        } catch (error) {
          console.error('Error fetching documents:', error);
          toast.error('Failed to fetch documents', { position: 'top-right', autoClose: 1000 });
        } finally {
          setIsLoading(false);
        }
      };
      fetchDocuments();
    } else {
      setDocuments([]);
    }
  }, [modalMode, editingExpense]);

  // Handle rows per page change
  const handleRowsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newRowsPerPage = parseInt(e.target.value);
    setRowsPerPage(newRowsPerPage);
    setCurrentPage(1);
  };

  const indexOfLastExpense = currentPage * rowsPerPage;
  const indexOfFirstExpense = indexOfLastExpense - rowsPerPage;
  const currentExpenses = filteredExpenses.slice(indexOfFirstExpense, indexOfLastExpense);
  const totalPages = Math.ceil(filteredExpenses.length / rowsPerPage);

  // Calculate metrics based on statusFilter
  const activeFilteredExpenses = filteredExpenses.filter((expense) => !expense.Deleted);
  const displayExpenses = statusFilter === 'Inactive' ? filteredExpenses : activeFilteredExpenses;
  const totalDisplayExpenses = displayExpenses.length;
  const totalDisplayAmount = displayExpenses.reduce((sum, expense) => sum + expense.Amount, 0);
  const totalDisplayPendingAmount = displayExpenses.reduce((sum, expense) => sum + (expense.PendingAmount || 0), 0);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setError(null);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const selectedFiles = Array.from(e.target.files).map((file) => ({
        file,
        preview: URL.createObjectURL(file),
      }));
      setFiles((prev) => [...prev, ...selectedFiles]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const removeFile = (index: number) => {
    setFiles((prev) => {
      const updatedFiles = prev.filter((_, i) => i !== index);
      URL.revokeObjectURL(prev[index].preview);
      return updatedFiles;
    });
  };

  const handleDeleteDocument = async (publicId: string) => {
    setIsDeleting((prev) => ({ ...prev, [publicId]: true }));
    try {
      const response = await axiosInstance.delete(`/documents/${publicId}`);
      setDocuments((prev) => prev.filter((doc) => doc.PublicId !== publicId));
      toast.success('Document deleted successfully', { position: 'top-right', autoClose: 3000 });
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Failed to delete document';
      toast.error(errorMessage, { position: 'top-right', autoClose: 3000 });
    } finally {
      setIsDeleting((prev) => ({ ...prev, [publicId]: false }));
    }
  };

  const handleViewDocument = (doc: Document) => {
    setViewDocument(doc);
  };

  const openEditModal = (expense: Expense) => {
    if (expense.Deleted) {
      toast.warning('Expense is inactive. Please activate to edit or make payment.', {
        position: 'top-right',
        autoClose: 3000,
      });
      return;
    }
    setEditingExpense(expense);
    setModalMode('edit');
    setFormData({
      SupplierId: expense.SupplierId.toString(),
      Reason: expense.Reason,
      Amount: expense.Amount.toString(),
    });
    setFiles([]);
    setError(null);
    setSuccess(null);
    setIsModalOpen(true);
  };

  const openPaymentModal = (expense: Expense) => {
    if (expense.Deleted) {
      toast.warning('Expense is inactive. Please activate to edit or make payment.', {
        position: 'top-right',
        autoClose: 1500,
      });
      return;
    }
    const supplier = suppliers.find((s) => s.SupplierId === expense.SupplierId);
    if (supplier) {
      setSelectedSupplier({
        SuppliersExpenseID: expense.SuppliersExpenseID,
        SupplierId: supplier.SupplierId,
        SupplierName: supplier.Name,
        Amount: expense.Amount,
      });
      setIsPaymentModalOpen(true);
    } else {
      toast.error('Supplier not found');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (!formData.SupplierId || !formData.Reason || !formData.Amount) {
      setError('Please fill all required fields');
      return;
    }

    if (parseFloat(formData.Amount) <= 0) {
      setError('Amount must be greater than 0');
      return;
    }

    try {
      const formDataToSend = new FormData();
      formDataToSend.append('SupplierId', formData.SupplierId);
      formDataToSend.append('Reason', formData.Reason);
      formDataToSend.append('Amount', formData.Amount);
      const userName = createdBy;

      if (modalMode === 'add') {
        formDataToSend.append('CreatedBy', userName);
      } else {
        formDataToSend.append('ModifiedBy', userName);
      }

      files.forEach((fileObj) => {
        formDataToSend.append('files', fileObj.file);
      });

      const url = modalMode === 'add' ? '/expenses' : `/expenses/${editingExpense?.SuppliersExpenseID}`;
      const method = modalMode === 'add' ? 'post' : 'put';

      const response = await axiosInstance[method](url, formDataToSend, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      toast.success(response.data.message, { position: 'top-right', autoClose: 2000 });
      setFormData({ SupplierId: '', Reason: '', Amount: '' });
      setFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
      setIsModalOpen(false);
      setEditingExpense(null);
      setModalMode('add');
      setDocuments([]);

      const expensesResponse = await axiosInstance.get('/expenses');
      const expensesWithPending = await Promise.all(
        expensesResponse.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || `Failed to ${modalMode === 'add' ? 'add' : 'update'} expense`;
      setError(errorMessage);
      toast.error(errorMessage, { position: 'top-right', autoClose: 1500 });
    }
  };

  const handleToggleDeleted = async (expense: Expense) => {
    try {
      const response = await axiosInstance.patch(`/expenses/${expense.SuppliersExpenseID}/toggle`, {
        ModifiedBy: createdBy,
      });
      toast.success(response.data.message);
      const expensesResponse = await axiosInstance.get('/expenses');
      const expensesWithPending = await Promise.all(
        expensesResponse.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || 'Failed to toggle expense';
      toast.error(errorMessage, { position: 'top-right', autoClose: 1500 });
    }
  };

  const handleExportToExcel = () => {
    if (filteredExpenses.length === 0) {
      toast.warning('No data to export to Excel');
      return;
    }
    const worksheetData = filteredExpenses.map((expense) => ({
      'Supplier Name': expense.SupplierName,
      'Email': expense.SupplierEmail,
      'Phone': expense.SupplierPhone,
      'Reason': expense.Reason,
      'Amount (₹)': expense.Amount.toFixed(2),
      'Pending Amount (₹)': (expense.PendingAmount || 0).toFixed(2),
      'Created On': new Date(expense.CreatedOn).toLocaleDateString(),
      'Created By': expense.CreatedBy,
      'Status': expense.Deleted ? 'Inactive' : 'Active',
    }));

    const worksheet = XLSX.utils.json_to_sheet(worksheetData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Expenses');
    XLSX.writeFile(workbook, 'Expenses.xlsx');
    toast.success('Expenses exported to Excel successfully', { position: 'top-right', autoClose: 1500 });
  };

  const handleClearFilters = () => {
    setSearchTerm('');
    const today = new Date();
    const formatDate = (date: Date) => date.toISOString().split('T')[0];
    setFromDate('');
    setToDate(formatDate(today));
    setPaymentStatus('All');
    setStatusFilter('All');
    if (searchInputRef.current) {
      searchInputRef.current.value = '';
      searchInputRef.current.blur();
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setFormData({ SupplierId: '', Reason: '', Amount: '' });
    setFiles([]);
    setError(null);
    setSuccess(null);
    setEditingExpense(null);
    setModalMode('add');
    setDocuments([]);
    if (fileInputRef.current) fileInputRef.current.value = '';
  };

  const closePaymentModal = () => {
    setIsPaymentModalOpen(false);
    setSelectedSupplier(null);
    axiosInstance.get('/expenses').then(async (response) => {
      const expensesWithPending = await Promise.all(
        response.data.map(async (expense: Expense) => {
          try {
            const paymentResponse = await axiosInstance.get(`/expense/${expense.SupplierId}/payments`, {
              params: { suppliersExpenseID: expense.SuppliersExpenseID },
            });
            const totalPaid = paymentResponse.data.reduce((sum: number, payment: any) => sum + payment.PaidAmount, 0);
            return { ...expense, PendingAmount: expense.Amount - totalPaid };
          } catch (error) {
            return { ...expense, PendingAmount: expense.Amount };
          }
        })
      );
      setExpenses(expensesWithPending);
      setFilteredExpenses(expensesWithPending);
    }).catch((err) => {
      toast.error('Failed to refresh expenses', { position: 'top-right', autoClose: 1500 });
    });
  };

  const pageNumbers = [];
  const maxPagesToShow = 5;
  const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
  const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }

  return (
    <>
      <Breadcrumb pageName="Manage Expenses" />
      <div className="p-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
        {/* Main Container - Responsive Flex Layout */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2">
          {/* Statistics Section */}
          <div className="flex flex-wrap items-center gap-3 text-xs sm:text-sm">
            {/* Total Expenses */}
            <div className="flex items-center gap-1">
              <FaMoneyBillWave className="text-indigo-600 dark:text-indigo-400 w-3 h-3" />
              <span className="text-gray-600 dark:text-gray-400">Total Expense:</span>
              <span className="font-semibold text-indigo-700 dark:text-indigo-400">
                {isLoading ? '...' : totalDisplayExpenses}
              </span>
            </div>
            {/* Total Amount */}
            <div className="flex items-center gap-1">
              <span className="text-gray-600 dark:text-gray-400">Total Amount:</span>
              <span className="font-semibold text-indigo-700 dark:text-indigo-400">
                {isLoading ? '...' : `₹${totalDisplayAmount.toLocaleString()}`}
              </span>
            </div>
            {/* Pending Amount */}
            <div className="flex items-center gap-1">
              <span className="text-gray-600 dark:text-gray-400">Total Pending:</span>
              <span className="font-semibold text-red-600 dark:text-red-400">
                {isLoading ? '...' : `₹${totalDisplayPendingAmount.toLocaleString()}`}
              </span>
            </div>
          </div>
          {/* Controls Section */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2">
            {/* Search Input */}
            <div className="relative w-full sm:w-auto">
              <FaSearch className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 text-xs" />
              <input
                type="text"
                name="search"
                placeholder="Search by Name, Email, Phone"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                ref={searchInputRef}
                autoComplete="new-search"
                className="w-full sm:w-48 pl-6 pr-2 py-1.5 text-xs rounded-md border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white placeholder:text-xs"
              />
            </div>
            {/* Filter Controls - Responsive Grid */}
            <div className="flex flex-wrap items-center gap-1.5 text-xs">
              {/* Date Range */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">From:</span>
                <input
                  type="date"
                  value={fromDate}
                  onChange={(e) => setFromDate(e.target.value)}
                  className="w-24 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">To:</span>
                <input
                  type="date"
                  value={toDate}
                  onChange={(e) => setToDate(e.target.value)}
                  className="w-24 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              {/* Payment Status */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">Payment:</span>
                <select
                  value={paymentStatus}
                  onChange={(e) => setPaymentStatus(e.target.value as 'All' | 'Paid' | 'Unpaid')}
                  className="w-16 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="All">All</option>
                  <option value="Paid">Paid</option>
                  <option value="Unpaid">Unpaid</option>
                </select>
              </div>
              {/* Status Filter */}
              <div className="flex items-center gap-1">
                <span className="text-gray-600 dark:text-gray-400 whitespace-nowrap">Status:</span>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value as 'All' | 'Active' | 'Inactive')}
                  className="w-16 p-1 text-xs rounded border border-gray-300 dark:border-gray-600 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="All">All</option>
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
              </div>
              {/* Action Buttons */}
              <div className="flex items-center gap-1">
                <button
                  onClick={handleClearFilters}
                  className="p-1.5 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors focus:outline-none focus:ring-1 focus:ring-gray-400"
                  title="Clear Filters"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
                <button
                  onClick={() => {
                    setModalMode('add');
                    setIsModalOpen(true);
                  }}
                  className="flex items-center gap-1 px-2 py-1.5 text-xs font-medium rounded text-white bg-indigo-600 hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-1 focus:ring-indigo-500"
                >
                  <span className="hidden sm:inline">Add Expense</span>
                  <span className="sm:hidden">Add</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex flex-row items-center justify-between p-2 bg-white my-2 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="flex items-center gap-1">
          <span className="text-xs text-gray-600 dark:text-gray-400">Rows per page:</span>
          <select
            value={rowsPerPage}
            onChange={handleRowsPerPageChange}
            className="p-1 text-xs rounded border border-gray-300 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
          >
            <option value={25}>25</option>
            <option value={50}>50</option>
            <option value={75}>75</option>
            <option value={100}>100</option>
          </select>
        </div>
        <button
          onClick={handleExportToExcel}
          className="flex items-center gap-1 px-2 py-1 text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 transition-colors focus:outline-none focus:ring-1 focus:ring-green-500"
        >
          <span>Export to Excel</span>
        </button>
      </div>

      <div className="mt-2">
        <div className="overflow-x-auto rounded-lg shadow-md">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center min-h-[300px] bg-gray-50 border border-gray-200 dark:border-gray-700">
              <FaSpinner className="animate-spin h-8 w-8 text-indigo-600 mb-3" />
              <p className="text-sm font-medium text-gray-600">Loading expenses...</p>
            </div>
          ) : (
            <table className="min-w-full text-[11px] md:text-xs bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700">
              <thead>
                <tr className="bg-indigo-600 text-white">
                  {[
                    'Sr.',
                    'Action',
                    'Supplier',
                    'Phone',
                    'Reason',
                    'Amount',
                    'Pending',
                    'Date',
                    'By',
                    'Status',
                  ].map((title) => (
                    <th key={title} className="py-1 px-2 text-left font-semibold whitespace-nowrap">
                      {title}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {dataFetched && currentExpenses.length === 0 ? (
                  <tr>
                    <td
                      colSpan={10}
                      className="text-center text-gray-600 dark:text-gray-400 text-xs"
                    >
                      <div className="flex flex-col items-center justify-center min-h-[300px] bg-gray-50 border-t border-gray-200">
                        <div className="mb-3">
                          <FileSearch className="h-8 w-8 text-gray-400 animate-pulse" />
                        </div>
                        <p className="text-sm font-medium text-gray-600 mb-1">No Expense records found</p>
                        <p className="text-xs text-gray-400 text-center px-4">
                          Try adjusting your filters or check back later
                        </p>
                      </div>
                    </td>
                  </tr>
                ) : (
                  currentExpenses.map((expense, index) => (
                    <tr
                      key={expense.SuppliersExpenseID}
                      className={`border-b border-gray-200 dark:border-gray-700 transition duration-150 ${
                        expense.Deleted
                          ? 'bg-gray-100 dark:bg-gray-800 opacity-60'
                          : index % 2 === 0
                          ? 'bg-gray-100 dark:bg-gray-800'
                          : 'bg-white dark:bg-gray-900'
                      } hover:bg-indigo-100 dark:hover:bg-gray-700`}
                    >
                      <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                        {indexOfFirstExpense + index + 1}
                      </td>
                      <td className="py-1 px-2 flex gap-2 text-black dark:text-gray-200 whitespace-nowrap">
                        <button
                          onClick={() => openPaymentModal(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-gray-400 cursor-not-allowed'
                              : 'bg-blue-600 hover:bg-blue-700'
                          }`}
                          title="Make Payment"
                        >
                          <FaMoneyBillWave className="w-3 h-3 mr-1" />
                          Pay
                        </button>
                        <button
                          onClick={() => openEditModal(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-gray-400 cursor-not-allowed'
                              : 'bg-yellow-600 hover:bg-yellow-700'
                          }`}
                          title="Edit Expense"
                        >
                          <FaEdit className="w-3 h-3 mr-1" />
                          Edit
                        </button>
                        <button
                          onClick={() => handleToggleDeleted(expense)}
                          className={`inline-flex items-center px-2 py-1 text-white rounded transition text-[11px] ${
                            expense.Deleted
                              ? 'bg-green-600 hover:bg-green-700'
                              : 'bg-red-600 hover:bg-red-700'
                          }`}
                          title={expense.Deleted ? 'Activate' : 'Deactivate'}
                        >
                          {expense.Deleted ? (
                            <FaToggleOff className="w-3 h-3 mr-1" />
                          ) : (
                            <FaToggleOn className="w-3 h-3 mr-1" />
                          )}
                          {expense.Deleted ? 'Active' : 'Inactive'}
                        </button>
                      </td>
                      <td className="px-2 py-1.5 font-medium text-gray-900 dark:text-gray-200">{expense.SupplierName}</td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">{expense.SupplierPhone}</td>
                      <td className="px-1 py-1.5 text-gray-700 dark:text-gray-200 max-w-xs truncate" title={expense.Reason}>
                        {expense.Reason}
                      </td>
                      <td className="px-1.5 py-1.5 text-right font-semibold text-green-600 dark:text-green-400">
                        ₹{expense.Amount.toFixed(2)}
                      </td>
                      <td className="px-1.5 py-1.5 text-right font-semibold text-red-600 dark:text-red-400">
                        ₹{(expense.PendingAmount || 0).toFixed(2)}
                      </td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">
                        {new Date(expense.CreatedOn).toLocaleDateString('en-IN')}
                      </td>
                      <td className="px-1.5 py-1.5 text-gray-600 dark:text-gray-200">{expense.CreatedBy}</td>
                      <td className="py-1 px-2 text-black dark:text-gray-200 whitespace-nowrap">
                        <span
                          className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${
                            expense.Deleted
                              ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'
                              : 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'
                          }`}
                        >
                          {expense.Deleted ? 'Inactive' : 'Active'}
                        </span>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          )}
        </div>

        <div className="flex items-center justify-between mt-4 px-3">
          <div className="text-xs text-gray-600 dark:text-gray-400">
            <span>
              Showing {indexOfFirstExpense + 1} to{' '}
              {Math.min(indexOfLastExpense, filteredExpenses.length)} of{' '}
              {filteredExpenses.length} expenses
            </span>
          </div>
          <nav className="flex items-center space-x-1">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="p-1.5 rounded-md text-gray-600 bg-gray-100 hover:bg-gray-200 disabled:bg-gray-100 disabled:text-gray-400 transition duration-150"
            >
              <FaChevronLeft className="w-4 h-4" />
            </button>
            {startPage > 1 && (
              <>
                <button
                  onClick={() => setCurrentPage(1)}
                  className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition duration-150"
                >
                  1
                </button>
                {startPage > 2 && (
                  <span className="px-2 text-xs text-gray-600">...</span>
                )}
              </>
            )}
            {pageNumbers.map((page) => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`px-3 py-1 text-xs font-medium rounded-md transition duration-150 ${
                  currentPage === page
                    ? 'bg-purple-500 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {page}
              </button>
            ))}
            {endPage < totalPages && (
              <>
                {endPage < totalPages - 1 && (
                  <span className="px-2 text-xs text-gray-600">...</span>
                )}
                <button
                  onClick={() => setCurrentPage(totalPages)}
                  className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition duration-150"
                >
                  {totalPages}
                </button>
              </>
            )}
            <button
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="p-1.5 rounded-md text-gray-600 bg-gray-100 hover:bg-gray-200 disabled:bg-gray-100 disabled:text-gray-400 transition duration-150"
            >
              <FaChevronRight className="w-4 h-4" />
            </button>
          </nav>
        </div>
      </div>

      {/* Add/Edit Expense Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-4 w-full max-w-md">
            <div className="flex justify-between items-center mb-3 pb-2 border-b border-gray-200">
              <h2 className="text-base font-semibold text-gray-800 flex items-center">
                <span className="w-5 h-5 flex items-center justify-center rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white mr-2">
                  {modalMode === 'add' ? '+' : '✎'}
                </span>
                {modalMode === 'add' ? 'Add New Expense' : 'Update Expense'}
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1"
              >
                <FaTimes size={16} />
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-3">
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Supplier <RequiredAsterisk />
                </label>
                <select
                  name="SupplierId"
                  value={formData.SupplierId}
                  onChange={handleInputChange}
                  className="w-full px-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                  required
                >
                  <option value="">Select Supplier</option>
                  {suppliers.map((supplier) => (
                    <option key={supplier.SupplierId} value={supplier.SupplierId}>
                      {supplier.Name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Reason <RequiredAsterisk />
                </label>
                <textarea
                  name="Reason"
                  value={formData.Reason}
                  onChange={handleInputChange}
                  className="w-full px-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                  rows={2}
                  required
                />
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Amount <RequiredAsterisk />
                </label>
                <div className="relative">
                  <span className="absolute inset-y-0 left-0 flex items-center pl-2.5 text-gray-500">₹</span>
                  <input
                    type="number"
                    name="Amount"
                    value={formData.Amount}
                    onChange={handleInputChange}
                    className="w-full pl-6 pr-2.5 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-white"
                    required
                    min="0"
                    step="0.01"
                  />
                </div>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Upload Files
                  {(files.length > 0 || documents.length > 0) && (
                    <span className="ml-2 text-xs text-indigo-600">
                      ({files.length + documents.length}{' '}
                      {files.length + documents.length === 1 ? 'file' : 'files'})
                    </span>
                  )}
                </label>
                <div className="flex items-center space-x-2">
                  <label className="flex-1 flex items-center justify-center px-2.5 py-1.5 border border-gray-300 border-dashed rounded-md bg-gray-50 hover:bg-gray-100 cursor-pointer">
                    <FaUpload className="mr-1.5 text-gray-400" size={14} />
                    <span className="text-xs text-gray-500">Choose files</span>
                    <input
                      type="file"
                      multiple
                      onChange={handleFileChange}
                      ref={fileInputRef}
                      className="hidden"
                    />
                  </label>
                </div>
              </div>

              {(files.length > 0 || documents.length > 0) && (
                <div className="bg-gray-50 p-2 rounded-md">
                  <h3 className="text-xs font-medium text-gray-700 mb-1.5">Files:</h3>
                  <ul className="space-y-1 max-h-24 overflow-y-auto">
                    {documents.map((doc, index) => (
                      <li
                        key={`doc-${doc.DocumentId}`}
                        className="flex items-center justify-between bg-white p-1.5 rounded-md border border-gray-200 text-xs"
                      >
                        <span className="truncate">{index + 1}. </span>
                        <span className="truncate flex-1">
                          {doc.DocumentUrl.split('/').pop() || 'Document'}
                        </span>
                        <button
                          type="button"
                          onClick={() => handleViewDocument(doc)}
                          className="text-blue-500 hover:text-blue-700 transition duration-150 flex-shrink-0 mr-2"
                          title="View Document"
                        >
                          <FaEye className="w-4 h-4" />
                        </button>
                        <button
                          type="button"
                          onClick={() => handleDeleteDocument(doc.PublicId)}
                          disabled={isDeleting[doc.PublicId]}
                          className="text-red-500 hover:text-red-600 hover:bg-red-50 p-1 rounded-full disabled:opacity-50"
                        >
                          {isDeleting[doc.PublicId] ? (
                            <FaTimes className="animate-spin w-4 h-4" />
                          ) : (
                            <FaTrash size={12} />
                          )}
                        </button>
                      </li>
                    ))}
                    {files.map((fileObj, index) => (
                      <li
                        key={`file-${index}`}
                        className="flex items-center justify-between bg-white p-1.5 rounded-md border border-gray-200 text-xs"
                      >
                        <span className="truncate">{documents.length + index + 1}. </span>
                        <span className="truncate flex-1">{fileObj.file.name}</span>
                        <button
                          type="button"
                          onClick={() => removeFile(index)}
                          className="text-red-500 hover:text-red-600 hover:bg-red-50 p-1 rounded-full"
                        >
                          <FaTrash size={12} />
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-2 rounded">
                  <p className="text-red-700 text-xs">{error}</p>
                </div>
              )}

              {success && (
                <div className="bg-green-50 border-l-4 border-green-500 p-2 rounded">
                  <p className="text-green-700 text-xs">{success}</p>
                </div>
              )}

              <div className="flex justify-end gap-2 pt-2 border-t border-gray-100">
                <button
                  type="button"
                  onClick={closeModal}
                  className="px-3 py-1.5 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-3 py-1.5 text-xs font-medium text-white rounded-md bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-purple-400"
                >
                  {modalMode === 'add' ? 'Save' : 'Update'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Payment Modal */}
      {isPaymentModalOpen && selectedSupplier && (
        <ExpensePayment
          expense={{
            SupplierId: selectedSupplier.SupplierId,
            SupplierName: selectedSupplier.SupplierName,
            Amount: selectedSupplier.Amount,
            SuppliersExpenseID: selectedSupplier.SuppliersExpenseID,
          }}
          onClose={closePaymentModal}
          onSuccess={() => {
            closePaymentModal();
            toast.success('Payment processed successfully', { position: 'top-right', autoClose: 2000 });
          }}
          createdBy={createdBy}
          searchInputRef={searchInputRef}
        />
      )}

      {/* Document Viewer Modal */}
      {viewDocument && (
        <DocumentViewerModal
          document={viewDocument}
          onClose={() => setViewDocument(null)}
        />
      )}
    </>
  );
};

export default ManageExpense;

