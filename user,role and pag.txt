1.utils/permissions.ts

import prisma from './db';

// Enhanced permission check with admin bypass and proper hierarchy
export async function checkUserPermission(
  userId: number,
  pageId: number,
  permissionType: 'CanView' | 'CanCreate' | 'CanEdit' | 'CanDelete' | 'CanAccessPage'
): Promise<boolean> {
  try {
    // Get user with role info
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: { Role: true },
    });

    if (!user) return false;

    // ✅ Admin bypass - Admin role gets all permissions
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      return true;
    }

    // पहले Role permission check करो (prerequisite)
    const rolePermission = await prisma.rolePagePermission.findFirst({
      where: {
        RoleId: user.RoleId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर Role को permission नहीं है तो User को भी नहीं मिलेगा
    if (!rolePermission || !rolePermission[permissionType]) {
      return false;
    }

    // Check user-specific permission
    const userPermission = await prisma.userPagePermission.findFirst({
      where: {
        UserId: userId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर User का specific permission है तो वो override करेगा
    if (userPermission) {
      return userPermission[permissionType] || false;
    }

    // अगर User का specific permission नहीं है तो Role permission use करो
    return rolePermission[permissionType] || false;

  } catch (error) {
    console.error('Error checking permission:', error);
    return false;
  }
}

// Check if user can access page by URL - FIXED LOGIC
export async function canAccessPage(pageUrl: string): Promise<boolean> {
  try {
    // Get current user (you'll need to implement getUserFromToken in utils)
    const { getUserFromToken } = await import('./utils/getUserFromToken');
    const user = await getUserFromToken();
    
    if (!user) return false;

    const page = await prisma.page.findFirst({
      where: { 
        PageUrl: pageUrl,
        IsActive: true 
      }
    });

    if (!page) return false;

    // Admin bypass
    if (user.roleId === 1) return true;

    return await checkUserPermission(user.id, page.Id, 'CanAccessPage');
  } catch (error) {
    console.error('Error checking page access:', error);
    return false;
  }
}

// Get user accessible pages - FIXED LOGIC
export async function getUserAccessiblePages(userId: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: {
        Role: {
          include: {
            RolePagePermissions: {
              where: { IsActive: true },
              include: { Page: true },
            },
          },
        },
        UserPagePermissions: {
          where: { IsActive: true },
          include: { Page: true },
        },
      },
    });

    if (!user) return [];

    // ✅ Admin gets all pages
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      const allPages = await prisma.page.findMany({
        where: { IsActive: true },
      });
      
      return allPages.map(page => ({
        pageId: page.Id,
        pageName: page.PageName,
        pageUrl: page.PageUrl,
        category: page.Category,
        canView: true,
        canCreate: true,
        canEdit: true,
        canDelete: true,
        canAccessPage: true,
        source: 'admin',
      }));
    }

    const permissions = new Map();

    // पहले role permissions add करो
    user.Role.RolePagePermissions.forEach(rp => {
      if (rp.CanAccessPage) { // CanAccessPage होना जरूरी है
        permissions.set(rp.PageId, {
          pageId: rp.PageId,
          pageName: rp.Page.PageName,
          pageUrl: rp.Page.PageUrl,
          category: rp.Page.Category,
          canView: rp.CanView,
          canCreate: rp.CanCreate,
          canEdit: rp.CanEdit,
          canDelete: rp.CanDelete,
          canAccessPage: rp.CanAccessPage,
          source: 'role',
        });
      }
    });

    // User permissions से override करो (लेकिन सिर्फ वहीं जहां role permission है)
    user.UserPagePermissions.forEach(up => {
      const rolePermission = permissions.get(up.PageId);
      if (rolePermission) { // Role permission होना जरूरी है
        permissions.set(up.PageId, {
          pageId: up.PageId,
          pageName: up.Page.PageName,
          pageUrl: up.Page.PageUrl,
          category: up.Page.Category,
          canView: up.CanView && rolePermission.canView, // Role में permission होनी चाहिए
          canCreate: up.CanCreate && rolePermission.canCreate,
          canEdit: up.CanEdit && rolePermission.canEdit,
          canDelete: up.CanDelete && rolePermission.canDelete,
          canAccessPage: up.CanAccessPage && rolePermission.canAccessPage,
          source: 'user',
        });
      }
    });

    return Array.from(permissions.values()).filter(p => p.canAccessPage);
  } catch (error) {
    console.error('Error getting user accessible pages:', error);
    return [];
  }
}

// Get user permissions for specific page - FIXED LOGIC
export async function getPagePermissions(userId: number, pageId: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: { Role: true },
    });

    if (!user) return null;

    // Admin gets all permissions
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      return {
        canView: true,
        canCreate: true,
        canEdit: true,
        canDelete: true,
        canAccessPage: true,
        source: 'admin',
      };
    }

    // पहले Role permission check करो
    const rolePermission = await prisma.rolePagePermission.findFirst({
      where: {
        RoleId: user.RoleId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर Role को access नहीं है तो User को भी नहीं मिलेगा
    if (!rolePermission || !rolePermission.CanAccessPage) {
      return {
        canView: false,
        canCreate: false,
        canEdit: false,
        canDelete: false,
        canAccessPage: false,
        source: 'none',
      };
    }

    // Check user-specific permission
    const userPermission = await prisma.userPagePermission.findFirst({
      where: {
        UserId: userId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर User का specific permission है तो वो override करेगा
    if (userPermission) {
      return {
        canView: userPermission.CanView && rolePermission.CanView,
        canCreate: userPermission.CanCreate && rolePermission.CanCreate,
        canEdit: userPermission.CanEdit && rolePermission.CanEdit,
        canDelete: userPermission.CanDelete && rolePermission.CanDelete,
        canAccessPage: userPermission.CanAccessPage && rolePermission.CanAccessPage,
        source: 'user',
      };
    }

    // अगर User का specific permission नहीं है तो Role permission use करो
    return {
      canView: rolePermission.CanView,
      canCreate: rolePermission.CanCreate,
      canEdit: rolePermission.CanEdit,
      canDelete: rolePermission.CanDelete,
      canAccessPage: rolePermission.CanAccessPage,
      source: 'role',
    };

  } catch (error) {
    console.error('Error getting page permissions:', error);
    return null;
  }
}
-----------------------------------------------------------------------------------
2. permissions.ts (utils के अंदर) - FIXED

import prisma from './db';

// Enhanced permission check with admin bypass and proper hierarchy
export async function checkUserPermission(
  userId: number,
  pageId: number,
  permissionType: 'CanView' | 'CanCreate' | 'CanEdit' | 'CanDelete' | 'CanAccessPage'
): Promise<boolean> {
  try {
    // Get user with role info
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: { Role: true },
    });

    if (!user) return false;

    // ✅ Admin bypass - Admin role gets all permissions
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      return true;
    }

    // पहले Role permission check करो (prerequisite)
    const rolePermission = await prisma.rolePagePermission.findFirst({
      where: {
        RoleId: user.RoleId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर Role को permission नहीं है तो User को भी नहीं मिलेगा
    if (!rolePermission || !rolePermission[permissionType]) {
      return false;
    }

    // Check user-specific permission
    const userPermission = await prisma.userPagePermission.findFirst({
      where: {
        UserId: userId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर User का specific permission है तो वो override करेगा
    if (userPermission) {
      return userPermission[permissionType] || false;
    }

    // अगर User का specific permission नहीं है तो Role permission use करो
    return rolePermission[permissionType] || false;

  } catch (error) {
    console.error('Error checking permission:', error);
    return false;
  }
}

// Check if user can access page by URL - FIXED LOGIC
export async function canAccessPage(pageUrl: string): Promise<boolean> {
  try {
    // Get current user (you'll need to implement getUserFromToken in utils)
    const { getUserFromToken } = await import('./utils/getUserFromToken');
    const user = await getUserFromToken();
    
    if (!user) return false;

    const page = await prisma.page.findFirst({
      where: { 
        PageUrl: pageUrl,
        IsActive: true 
      }
    });

    if (!page) return false;

    // Admin bypass
    if (user.roleId === 1) return true;

    return await checkUserPermission(user.id, page.Id, 'CanAccessPage');
  } catch (error) {
    console.error('Error checking page access:', error);
    return false;
  }
}

// Get user accessible pages - FIXED LOGIC
export async function getUserAccessiblePages(userId: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: {
        Role: {
          include: {
            RolePagePermissions: {
              where: { IsActive: true },
              include: { Page: true },
            },
          },
        },
        UserPagePermissions: {
          where: { IsActive: true },
          include: { Page: true },
        },
      },
    });

    if (!user) return [];

    // ✅ Admin gets all pages
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      const allPages = await prisma.page.findMany({
        where: { IsActive: true },
      });
      
      return allPages.map(page => ({
        pageId: page.Id,
        pageName: page.PageName,
        pageUrl: page.PageUrl,
        category: page.Category,
        canView: true,
        canCreate: true,
        canEdit: true,
        canDelete: true,
        canAccessPage: true,
        source: 'admin',
      }));
    }

    const permissions = new Map();

    // पहले role permissions add करो
    user.Role.RolePagePermissions.forEach(rp => {
      if (rp.CanAccessPage) { // CanAccessPage होना जरूरी है
        permissions.set(rp.PageId, {
          pageId: rp.PageId,
          pageName: rp.Page.PageName,
          pageUrl: rp.Page.PageUrl,
          category: rp.Page.Category,
          canView: rp.CanView,
          canCreate: rp.CanCreate,
          canEdit: rp.CanEdit,
          canDelete: rp.CanDelete,
          canAccessPage: rp.CanAccessPage,
          source: 'role',
        });
      }
    });

    // User permissions से override करो (लेकिन सिर्फ वहीं जहां role permission है)
    user.UserPagePermissions.forEach(up => {
      const rolePermission = permissions.get(up.PageId);
      if (rolePermission) { // Role permission होना जरूरी है
        permissions.set(up.PageId, {
          pageId: up.PageId,
          pageName: up.Page.PageName,
          pageUrl: up.Page.PageUrl,
          category: up.Page.Category,
          canView: up.CanView && rolePermission.canView, // Role में permission होनी चाहिए
          canCreate: up.CanCreate && rolePermission.canCreate,
          canEdit: up.CanEdit && rolePermission.canEdit,
          canDelete: up.CanDelete && rolePermission.canDelete,
          canAccessPage: up.CanAccessPage && rolePermission.canAccessPage,
          source: 'user',
        });
      }
    });

    return Array.from(permissions.values()).filter(p => p.canAccessPage);
  } catch (error) {
    console.error('Error getting user accessible pages:', error);
    return [];
  }
}

// Get user permissions for specific page - FIXED LOGIC
export async function getPagePermissions(userId: number, pageId: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { Id: userId },
      include: { Role: true },
    });

    if (!user) return null;

    // Admin gets all permissions
    if (user.Role.Name.toLowerCase() === 'admin' || user.Role.Name.toLowerCase() === 'administrator') {
      return {
        canView: true,
        canCreate: true,
        canEdit: true,
        canDelete: true,
        canAccessPage: true,
        source: 'admin',
      };
    }

    // पहले Role permission check करो
    const rolePermission = await prisma.rolePagePermission.findFirst({
      where: {
        RoleId: user.RoleId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर Role को access नहीं है तो User को भी नहीं मिलेगा
    if (!rolePermission || !rolePermission.CanAccessPage) {
      return {
        canView: false,
        canCreate: false,
        canEdit: false,
        canDelete: false,
        canAccessPage: false,
        source: 'none',
      };
    }

    // Check user-specific permission
    const userPermission = await prisma.userPagePermission.findFirst({
      where: {
        UserId: userId,
        PageId: pageId,
        IsActive: true,
      },
    });

    // अगर User का specific permission है तो वो override करेगा
    if (userPermission) {
      return {
        canView: userPermission.CanView && rolePermission.CanView,
        canCreate: userPermission.CanCreate && rolePermission.CanCreate,
        canEdit: userPermission.CanEdit && rolePermission.CanEdit,
        canDelete: userPermission.CanDelete && rolePermission.CanDelete,
        canAccessPage: userPermission.CanAccessPage && rolePermission.CanAccessPage,
        source: 'user',
      };
    }

    // अगर User का specific permission नहीं है तो Role permission use करो
    return {
      canView: rolePermission.CanView,
      canCreate: rolePermission.CanCreate,
      canEdit: rolePermission.CanEdit,
      canDelete: rolePermission.CanDelete,
      canAccessPage: rolePermission.CanAccessPage,
      source: 'role',
    };

  } catch (error) {
    console.error('Error getting page permissions:', error);
    return null;
  }
}

---------------------------------------------------------------------------------
3.checkPermission.ts(utils)

import { getUserFromToken } from './utils/getUserFromToken';
import { checkUserPermission } from './permissions';
import prisma from './db';

export async function canAccessPage(pageUrl: string): Promise<boolean> {
  try {
    const user = await getUserFromToken();
    if (!user) return false;

    // Admin bypass
    if (user.roleId === 1) return true;

    const page = await prisma.page.findFirst({
      where: { 
        PageUrl: pageUrl,
        IsActive: true 
      }
    });

    if (!page) return false;

    return await checkUserPermission(user.id, page.Id, 'CanAccessPage');
  } catch (error) {
    console.error('Error checking page access:', error);
    return false;
  }
}
----------------------------------------------------------------------------------------

4.api/check-permission/route.ts


import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/app/lib/db';
import { getUserFromToken } from '../../lib/utils/getUserFromToken';

export async function POST(request: NextRequest) {
  try {
    const { pageUrl }: { pageUrl: string } = await request.json();
    
    // Current user निकालो
    const user = await getUserFromToken();
    if (!user) {
      return NextResponse.json({ 
        permissions: {
          canView: false,
          canCreate: false,
          canEdit: false,
          canDelete: false,
          canAccessPage: false
        }
      });
    }
    
    // Admin है तो सब allow करो
    if (user.roleId === 1) {
      return NextResponse.json({ 
        permissions: {
          canView: true,
          canCreate: true,
          canEdit: true,
          canDelete: true,
          canAccessPage: true
        }
      });
    }
    
    // Page find करो
    const page = await prisma.page.findFirst({
      where: { PageUrl: pageUrl, IsActive: true }
    });
    
    if (!page) {
      return NextResponse.json({ 
        permissions: {
          canView: false,
          canCreate: false,
          canEdit: false,
          canDelete: false,
          canAccessPage: false
        }
      });
    }
    
    // Role permission check करो (prerequisite)
    const rolePermission = await prisma.rolePagePermission.findFirst({
      where: {
        RoleId: user.roleId!,
        PageId: page.Id,
        IsActive: true,
      }
    });
    
    // User specific permission check करो
    const userPermission = await prisma.userPagePermission.findFirst({
      where: {
        UserId: user.id,
        PageId: page.Id,
        IsActive: true,
      }
    });
    
    // अगर User का specific permission है तो वो override करेगा
    if (userPermission) {
      // User permission override होगा, लेकिन role में permission होना जरूरी है prerequisite के लिए
      const finalPermissions = {
        canView: userPermission.CanView && (rolePermission?.CanView || false),
        canCreate: userPermission.CanCreate && (rolePermission?.CanCreate || false),
        canEdit: userPermission.CanEdit && (rolePermission?.CanEdit || false),
        canDelete: userPermission.CanDelete && (rolePermission?.CanDelete || false),
        canAccessPage: userPermission.CanAccessPage && (rolePermission?.CanAccessPage || false)
      };
      
      return NextResponse.json({ 
        permissions: finalPermissions
      });
    }
    
    // अगर User का specific permission नहीं है तो Role permission use करो
    if (rolePermission && rolePermission.CanAccessPage) {
      return NextResponse.json({ 
        permissions: {
          canView: rolePermission.CanView,
          canCreate: rolePermission.CanCreate,
          canEdit: rolePermission.CanEdit,
          canDelete: rolePermission.CanDelete,
          canAccessPage: rolePermission.CanAccessPage
        }
      });
    }
    
    // No permission found
    return NextResponse.json({ 
      permissions: {
        canView: false,
        canCreate: false,
        canEdit: false,
        canDelete: false,
        canAccessPage: false
      }
    });
    
  } catch (error) {
    console.error('Check permissions API error:', error);
    return NextResponse.json({ 
      permissions: {
        canView: false,
        canCreate: false,
        canEdit: false,
        canDelete: false,
        canAccessPage: false
      }
    });
  }
}

------------------------------------------------------------------------------------------------------
6.role permission.tsx

'use client';
import { useRouter } from "next/navigation";
import React from 'react';
import { useState, useEffect } from 'react';
import axiosInstance from '../lib/axios';

interface Role {
  Id: number;
  Name: string;
}

interface Page {
  Id: number;
  PageName: string;
  PageUrl: string;
  Category?: string;
}

interface Permission {
  Id?: number;
  RoleId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
  Page?: Page;
}

interface ApiResponse<T> {
  success: boolean;
  roles?: T;
  pages?: T;
  permissions?: T;
}

interface Message {
  type: 'success' | 'error' | 'warning' | 'info';
  text: string;
}

// Animated Message Component
const MessageAlert = ({ message, onClose }: { message: Message; onClose: () => void }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    
    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onClose, 300);
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose, message]);

  const styles = {
    success: 'bg-green-100 border-green-400 text-green-700',
    error: 'bg-red-100 border-red-400 text-red-700',
    warning: 'bg-yellow-100 border-yellow-400 text-yellow-700',
    info: 'bg-blue-100 border-blue-400 text-blue-700',
  };

  const icons = {
    success: '✓',
    error: '✗',
    warning: '⚠',
    info: 'ℹ'
  };

  return (
    <div className={`transform transition-all duration-300 ease-in-out ${
      isVisible ? 'translate-y-0 opacity-100 scale-100' : '-translate-y-2 opacity-0 scale-95'
    }`}>
      <div className={`${styles[message.type]} border-l-4 p-3 rounded shadow-sm flex items-center justify-between mb-4 w-full`}>
        <div className="flex items-center">
          <span className="text-lg mr-2">{icons[message.type]}</span>
          <span className="text-sm font-medium">{message.text}</span>
        </div>
        <button
          onClick={() => {
            setIsVisible(false);
            setTimeout(onClose, 300);
          }}
          className="text-xl hover:opacity-70 ml-4 transform transition-transform hover:scale-110"
        >
          ×
        </button>
      </div>
    </div>
  );
};

export default function RolePermissions() {
  const router = useRouter();
  const [roles, setRoles] = useState<Role[]>([]);
  const [pages, setPages] = useState<Page[]>([]);
  const [filteredPages, setFilteredPages] = useState<Page[]>([]);
  const [selectedRoleId, setSelectedRoleId] = useState<string>('');
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [permissions, setPermissions] = useState<Permission[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message | null>(null);
  const [messageKey, setMessageKey] = useState(0);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  // Check if selected role is admin
  const isSelectedRoleAdmin = parseInt(selectedRoleId) === 1;

  // Show message with animation
  const showMessage = (type: 'success' | 'error' | 'warning' | 'info', text: string) => {
    setMessage({ type, text });
    setMessageKey(prev => prev + 1);
  };

  const clearMessage = () => {
    setMessage(null);
  };

  useEffect(() => {
    fetchRoles();
    fetchPages();
  }, []);

  useEffect(() => {
    if (selectedRoleId) {
      const role = roles.find(r => r.Id.toString() === selectedRoleId);
      setSelectedRole(role || null);
      fetchRolePermissions();
    }
  }, [selectedRoleId, roles]);

  // Filter pages based on search and category
  useEffect(() => {
    let filtered = pages;

    if (searchTerm) {
      filtered = filtered.filter(page => 
        page.PageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        page.PageUrl.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(page => page.Category === selectedCategory);
    }

    setFilteredPages(filtered);
  }, [pages, searchTerm, selectedCategory]);

  const fetchRoles = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Role[]>>('/api/role');
      if (response.data.success && response.data.roles) {
        setRoles(response.data.roles);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch roles');
      console.error('Error fetching roles:', error);
    }
  };

  const fetchPages = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Page[]>>('/api/pages');
      if (response.data.success && response.data.pages) {
        setPages(response.data.pages);
        setFilteredPages(response.data.pages);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch pages');
      console.error('Error fetching pages:', error);
    }
  };

  const fetchRolePermissions = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Permission[]>>(`/api/role-permission?roleId=${selectedRoleId}`);
      if (response.data.success && response.data.permissions) {
        setPermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch role permissions');
      console.error('Error fetching role permissions:', error);
    }
  };

  const getPermissionForPage = (pageId: number): Permission => {
    const existing = permissions.find(p => p.PageId === pageId);
    return existing || {
      RoleId: parseInt(selectedRoleId),
      PageId: pageId,
      CanAccessPage: isSelectedRoleAdmin,
      CanView: isSelectedRoleAdmin,
      CanCreate: isSelectedRoleAdmin,
      CanEdit: isSelectedRoleAdmin,
      CanDelete: isSelectedRoleAdmin,
    };
  };

  // Get tooltip for checkboxes
  const getCheckboxTooltip = (pageId: number, field: keyof Permission, hasPermission: boolean): string => {
    if (isSelectedRoleAdmin) {
      return 'Admin role has full access to all permissions';
    }

    const page = pages.find(p => p.Id === pageId);
    const pageName = page?.PageName || 'this page';
    const fieldName = field.replace('Can', '').toLowerCase();

    // Special validation for dependent permissions
    if (field !== 'CanAccessPage') {
      const permission = getPermissionForPage(pageId);
      if (!permission.CanAccessPage && hasPermission) {
        return `Cannot grant ${fieldName} permission without page access permission for ${pageName}`;
      }
    }

    return hasPermission 
      ? `Click to revoke ${fieldName} permission from ${selectedRole?.Name} role for ${pageName}`
      : `Click to grant ${fieldName} permission to ${selectedRole?.Name} role for ${pageName}`;
  };

  // Auto-save permission on checkbox change with validation
  const updatePermission = async (pageId: number, field: keyof Permission, value: boolean) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    // Validation: Cannot grant specific permissions without CanAccessPage
    const currentPermission = getPermissionForPage(pageId);
    if (field !== 'CanAccessPage' && value && !currentPermission.CanAccessPage) {
      const page = pages.find(p => p.Id === pageId);
      const fieldName = field.replace('Can', '').toLowerCase();
      showMessage('warning', `Must grant page access permission first before granting ${fieldName} permission for ${page?.PageName}`);
      return;
    }

    // If revoking CanAccessPage, also revoke all other permissions
    let updatedPermissionData = { [field]: value };
    if (field === 'CanAccessPage' && !value) {
      updatedPermissionData = {
        CanAccessPage: false,
        CanView: false,
        CanCreate: false,
        CanEdit: false,
        CanDelete: false,
      };
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? { ...p, ...updatedPermissionData } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: field === 'CanAccessPage' ? value : false,
          CanView: field === 'CanView' ? value : false,
          CanCreate: field === 'CanCreate' ? value : false,
          CanEdit: field === 'CanEdit' ? value : false,
          CanDelete: field === 'CanDelete' ? value : false,
          ...updatedPermissionData,
        });
      }
      
      setPermissions(updatedPermissions);

      // Auto-save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        if (field === 'CanAccessPage' && !value) {
          showMessage('success', `All permissions revoked for ${selectedRole?.Name} role on ${page?.PageName}`);
        } else {
          const fieldName = field.replace('Can', '').toLowerCase();
          const action = value ? 'granted' : 'revoked';
          showMessage('success', `${fieldName} permission ${action} for ${selectedRole?.Name} role on ${page?.PageName}`);
        }
      }
    } catch (error) {
      showMessage('error', 'Failed to update permission');
      console.error('Error updating permission:', error);
    } finally {
      setLoading(false);
    }
  };

  // Check if role has all permissions for a page
  const hasAllPermissions = (pageId: number): boolean => {
    const permission = getPermissionForPage(pageId);
    return permission.CanAccessPage && permission.CanView && permission.CanCreate && permission.CanEdit && permission.CanDelete;
  };

  // Check if role has no permissions for a page
  const hasNoPermissions = (pageId: number): boolean => {
    const permission = getPermissionForPage(pageId);
    return !permission.CanAccessPage && !permission.CanView && !permission.CanCreate && !permission.CanEdit && !permission.CanDelete;
  };

  // Grant All Permissions for specific page
  const grantAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: true,
          CanView: true,
          CanCreate: true,
          CanEdit: true,
          CanDelete: true,
        } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: true,
          CanView: true,
          CanCreate: true,
          CanEdit: true,
          CanDelete: true,
        });
      }
      
      setPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions granted for ${selectedRole?.Name} role on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to grant all permissions');
      console.error('Error granting all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Revoke All Permissions for specific page
  const revokeAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        });
      }
      
      setPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions revoked for ${selectedRole?.Name} role on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to revoke all permissions');
      console.error('Error revoking all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Get unique categories for filter
  const categories = Array.from(new Set(pages.map(page => page.Category).filter(Boolean)));

  return (
    <div className="p-4">
      <div className="mb-4 flex items-center justify-between">
        {/* Left side text */}
        <div>
          <h1 className="text-2xl font-bold text-gray-800">Role Permissions</h1>
          <p className="text-sm text-gray-600">
            Manage role-based permissions for pages and functions. Role permissions are prerequisites for user permissions.
          </p>
        </div>

        {/* Right side buttons */}
        <div className="flex space-x-2">
          <button
            onClick={() => router.push("/manage-page")}
            className="flex items-center gap-2 bg-indigo-600 text-white px-4 py-2 rounded-lg 
                       hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-400 focus:ring-offset-2 
                       transition-all duration-200 text-sm font-medium"
          >
            📄 Create New Page
          </button>
          <button
            onClick={() => router.push("/manage-user-permission")}
            className="flex items-center gap-2 bg-amber-600 text-white px-4 py-2 rounded-lg 
                       hover:bg-amber-700 focus:ring-2 focus:ring-amber-400 focus:ring-offset-2 
                       transition-all duration-200 text-sm font-medium"
          >
            👤 Assign Page to User
          </button>
        </div>
      </div>

      {/* Role Selection and Info Row */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 mb-3">
        {/* Role Selection */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
          <label className="block text-sm font-medium text-gray-700 mb-1.5">
            Select Role
          </label>
          <select
            value={selectedRoleId}
            onChange={(e) => setSelectedRoleId(e.target.value)}
            className="w-full mt-2 px-2.5 py-2 bg-gray-50 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-all"
          >
            <option value="">Choose a role...</option>
            {roles.map((role) => (
              <option key={role.Id} value={role.Id}>
                {role.Name}
              </option>
            ))}
          </select>
          <p className="mt-4 px-2.5 py-1.5 bg-blue-50 border border-blue-100 rounded text-md text-blue-600">
            💼 Role permissions are prerequisites for user permissions
          </p>
        </div>

        {/* Selected Role Information */}
        {selectedRole && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
            <label className="block text-sm font-medium text-gray-700 mb-1.5">
              Role Information
            </label>
            <div className={`p-2.5 rounded-lg border-2 ${isSelectedRoleAdmin 
              ? 'bg-red-50 border-red-200' 
              : 'bg-blue-50 border-blue-200'
            }`}>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className={`font-semibold ${isSelectedRoleAdmin ? 'text-red-900' : 'text-blue-900'}`}>
                    {selectedRole.Name}
                    <span className="ml-1.5 text-xs font-normal opacity-75">ID: {selectedRole.Id}</span>
                    {isSelectedRoleAdmin && (
                      <span className="ml-1.5 px-1.5 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">
                        ADMIN
                      </span>
                    )}
                  </h3>
                  <div className="flex items-center gap-2.5 mt-1.5 text-xs">
                    <div className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                      <span className="text-green-700">Access</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-blue-500 rounded-full"></span>
                      <span className="text-blue-700">View</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-yellow-500 rounded-full"></span>
                      <span className="text-yellow-700">Create</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                      <span className="text-purple-700">Edit</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-red-500 rounded-full"></span>
                      <span className="text-red-700">Delete</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {isSelectedRoleAdmin && (
                <div className="mt-1.5 px-2.5 py-1.5 bg-red-100 border border-red-200 rounded text-xs text-red-600">
                  ⚠️ Admin role has full access. Permissions cannot be modified.
                </div>
              )}
              
              {!isSelectedRoleAdmin && (
                <div className="mt-1.5 px-2.5 py-1.5 bg-blue-100 border border-blue-200 rounded text-xs text-blue-600">
                  ℹ️ Page access permission is required before granting specific function permissions.
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Animated Single Message */}
      {message && (
        <MessageAlert 
          key={messageKey}
          message={message} 
          onClose={clearMessage} 
        />
      )}

      {/* Permissions Table */}
      {selectedRoleId && (
        <div className="bg-white shadow-sm rounded-lg border">
          <div className="px-4 py-3 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-medium text-gray-900">Role Permissions</h2>
                <p className="text-xs text-gray-500 mt-1">
                  Click checkboxes to grant/revoke role permissions. Page access required before function permissions.
                </p>
                {/* Permission Information with Colors */}
                <div className="mt-2 text-xs">
                  <span className="font-semibold text-green-600">Access Page:</span>
                  <span className="text-gray-600"> Controls page access (prerequisite) | </span>
                  <span className="font-semibold text-blue-600">Functions:</span>
                  <span className="text-gray-600"> </span>
                  <span className="text-blue-600">View</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-yellow-600">Create</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-purple-600">Edit</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-red-600">Delete</span>
                  <span className="text-gray-600"> control specific functionalities</span>
                </div>
              </div>
              
              {/* Filters */}
              <div className="flex items-center space-x-3">
                <input
                  type="text"
                  placeholder="Search pages..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Categories</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Page Details
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-green-600 uppercase">
                    Access
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-blue-600 uppercase">
                    View
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-yellow-600 uppercase">
                    Create
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-purple-600 uppercase">
                    Edit
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-red-600 uppercase">
                    Delete
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-gray-600 uppercase">
                    Quick Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredPages.map((page) => {
                  const permission = getPermissionForPage(page.Id);
                  const hasAllPerms = hasAllPermissions(page.Id);
                  const hasNoPerms = hasNoPermissions(page.Id);
                  
                  return (
                    <tr key={page.Id} className="hover:bg-gray-50 transition-colors">
                      <td className="px-4 py-2"
                      title={`Category: ${page.Category || 'No Category'}`}>
                        <div className="font-medium text-gray-900">{page.PageName}</div>
                        <div className="text-xs text-gray-500">{page.PageUrl}</div>
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanAccessPage}
                          onChange={(e) => updatePermission(page.Id, 'CanAccessPage', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanAccessPage', permission.CanAccessPage)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanView}
                          onChange={(e) => updatePermission(page.Id, 'CanView', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading || !permission.CanAccessPage}
                          className={`h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            !permission.CanAccessPage && !isSelectedRoleAdmin 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-100'
                          }`}
                          title={getCheckboxTooltip(page.Id, 'CanView', permission.CanView)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanCreate}
                          onChange={(e) => updatePermission(page.Id, 'CanCreate', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading || !permission.CanAccessPage}
                          className={`h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            !permission.CanAccessPage && !isSelectedRoleAdmin 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-100'
                          }`}
                          title={getCheckboxTooltip(page.Id, 'CanCreate', permission.CanCreate)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanEdit}
                          onChange={(e) => updatePermission(page.Id, 'CanEdit', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading || !permission.CanAccessPage}
                          className={`h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            !permission.CanAccessPage && !isSelectedRoleAdmin 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-100'
                          }`}
                          title={getCheckboxTooltip(page.Id, 'CanEdit', permission.CanEdit)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanDelete}
                          onChange={(e) => updatePermission(page.Id, 'CanDelete', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading || !permission.CanAccessPage}
                          className={`h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            !permission.CanAccessPage && !isSelectedRoleAdmin 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-100'
                          }`}
                          title={getCheckboxTooltip(page.Id, 'CanDelete', permission.CanDelete)}
                        />
                      </td>

                      {/* Page-specific Grant/Revoke All Actions */}
                      <td className="px-3 py-2 text-center">
                        {!isSelectedRoleAdmin && (
                          <div className="flex space-x-1  justify-center">
                            <button
                              onClick={() => grantAllPermissionsForPage(page.Id)}
                              disabled={loading || hasAllPerms}
                              className={`bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasAllPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasAllPerms ? "Role already has all permissions" : "Grant all permissions to this role for this page"}
                            >
                              Grant All
                            </button>
                            <button
                              onClick={() => revokeAllPermissionsForPage(page.Id)}
                              disabled={loading || hasNoPerms}
                              className={`bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasNoPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasNoPerms ? "Role has no permissions to revoke" : "Revoke all permissions from this role for this page"}
                            >
                              Revoke All
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredPages.length === 0 && (
            <div className="p-8 text-center text-gray-500">
              <p>No pages found matching your filters.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

---------------------------------------------------
8.UserPermissions.tsx


'use client';
import React from 'react';
import { useState, useEffect } from 'react';
import axiosInstance from '../lib/axios';
import { useRouter } from "next/navigation";

interface User {
  Id: number;
  Name: string;
  Email: string;
  Role: { Id: number; Name: string; };
}

interface Page {
  Id: number;
  PageName: string;
  PageUrl: string;
  Category?: string;
}

interface Permission {
  Id?: number;
  UserId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
  Page?: Page;
}

interface RolePermission {
  RoleId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
}

interface ApiResponse<T> {
  success: boolean;
  users?: T;
  pages?: T;
  permissions?: T;
}

interface Message {
  type: 'success' | 'error' | 'warning' | 'info';
  text: string;
}

// Animated Message Component
const MessageAlert = ({ message, onClose }: { message: Message; onClose: () => void }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    
    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onClose, 300);
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose, message]);

  const styles = {
    success: 'bg-green-100 border-green-400 text-green-700',
    error: 'bg-red-100 border-red-400 text-red-700',
    warning: 'bg-yellow-100 border-yellow-400 text-yellow-700',
    info: 'bg-blue-100 border-blue-400 text-blue-700',
  };

  const icons = {
    success: '✓',
    error: '✗',
    warning: '⚠',
    info: 'ℹ'
  };

  return (
    <div className={`transform transition-all duration-300 ease-in-out ${
      isVisible ? 'translate-y-0 opacity-100 scale-100' : '-translate-y-2 opacity-0 scale-95'
    }`}>
      <div className={`${styles[message.type]} border-l-4 p-3 rounded shadow-sm flex items-center justify-between mb-4 w-full`}>
        <div className="flex items-center">
          <span className="text-lg mr-2">{icons[message.type]}</span>
          <span className="text-sm font-medium">{message.text}</span>
        </div>
        <button
          onClick={() => {
            setIsVisible(false);
            setTimeout(onClose, 300);
          }}
          className="text-xl hover:opacity-70 ml-4 transform transition-transform hover:scale-110"
        >
          ×
        </button>
      </div>
    </div>
  );
};

export default function UserPermissions() {
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [pages, setPages] = useState<Page[]>([]);
  const [filteredPages, setFilteredPages] = useState<Page[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [userPermissions, setUserPermissions] = useState<Permission[]>([]);
  const [rolePermissions, setRolePermissions] = useState<RolePermission[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message | null>(null);
  const [messageKey, setMessageKey] = useState(0);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const isSelectedUserAdmin = selectedUser?.Role.Id === 1;

  // Show message with animation
  const showMessage = (type: 'success' | 'error' | 'warning' | 'info', text: string) => {
    setMessage({ type, text });
    setMessageKey(prev => prev + 1);
  };

  const clearMessage = () => {
    setMessage(null);
  };

  useEffect(() => {
    fetchUsers();
    fetchPages();
  }, []);

  useEffect(() => {
    if (selectedUserId) {
      const user = users.find(u => u.Id.toString() === selectedUserId);
      setSelectedUser(user || null);
      fetchUserPermissions();
      if (user) {
        fetchRolePermissions(user.Role.Id);
      }
    }
  }, [selectedUserId, users]);

  // Filter pages based on search and category
  useEffect(() => {
    let filtered = pages;

    if (searchTerm) {
      filtered = filtered.filter(page => 
        page.PageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        page.PageUrl.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(page => page.Category === selectedCategory);
    }

    setFilteredPages(filtered);
  }, [pages, searchTerm, selectedCategory]);

  const fetchUsers = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<User[]>>('/api/user');
      if (response.data.success && response.data.users) {
        setUsers(response.data.users);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch users');
      console.error('Error fetching users:', error);
    }
  };

  const fetchPages = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Page[]>>('/api/pages');
      if (response.data.success && response.data.pages) {
        setPages(response.data.pages);
        setFilteredPages(response.data.pages);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch pages');
      console.error('Error fetching pages:', error);
    }
  };

  const fetchUserPermissions = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Permission[]>>(`/api/user-permission?userId=${selectedUserId}`);
      if (response.data.success && response.data.permissions) {
        setUserPermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch user permissions');
      console.error('Error fetching user permissions:', error);
    }
  };

  const fetchRolePermissions = async (roleId: number) => {
    try {
      const response = await axiosInstance.get<ApiResponse<RolePermission[]>>(`/api/role-permission?roleId=${roleId}`);
      if (response.data.success && response.data.permissions) {
        setRolePermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch role permissions');
      console.error('Error fetching role permissions:', error);
    }
  };

  const getRolePermissionForPage = (pageId: number): RolePermission | null => {
    return rolePermissions.find(p => p.PageId === pageId) || null;
  };

  const getUserPermissionForPage = (pageId: number): Permission => {
    const existing = userPermissions.find(p => p.PageId === pageId);
    return existing || {
      UserId: parseInt(selectedUserId),
      PageId: pageId,
      CanAccessPage: false,  // Default to false - user must be explicitly granted permission
      CanView: false,
      CanCreate: false,
      CanEdit: false,
      CanDelete: false,
    };
  };

  // Check if user can have permission based on role (prerequisite check)
  const canUserHavePermission = (pageId: number, field: keyof Permission): boolean => {
    if (isSelectedUserAdmin) return true;
    
    const rolePermission = getRolePermissionForPage(pageId);
    
    // Role must have CanAccessPage first for any permission
    if (!rolePermission?.CanAccessPage) {
      return false;
    }

    // For specific permissions, role must have that specific permission
    if (field !== 'CanAccessPage' && rolePermission) {
      const permissionKey = field as keyof RolePermission;
      if (permissionKey in rolePermission && !rolePermission[permissionKey]) {
        return false;
      }
    }

    return true;
  };

  // Enhanced validation for dependent permissions
  const canGrantSpecificPermission = (pageId: number, field: keyof Permission): boolean => {
    if (isSelectedUserAdmin) return true;
    if (field === 'CanAccessPage') return canUserHavePermission(pageId, field);
    
    // Check if user has access permission first
    const userPermission = getUserPermissionForPage(pageId);
    if (!userPermission.CanAccessPage) {
      return false;
    }
    
    return canUserHavePermission(pageId, field);
  };

  // Check if user has all available permissions for a page
  const hasAllAvailablePermissions = (pageId: number): boolean => {
    const rolePermission = getRolePermissionForPage(pageId);
    const userPermission = getUserPermissionForPage(pageId);
    
    if (!rolePermission?.CanAccessPage) return false;
    
    return userPermission.CanAccessPage &&
           (!rolePermission.CanView || userPermission.CanView) &&
           (!rolePermission.CanCreate || userPermission.CanCreate) &&
           (!rolePermission.CanEdit || userPermission.CanEdit) &&
           (!rolePermission.CanDelete || userPermission.CanDelete);
  };

  // Check if user has no permissions for a page
  const hasNoPermissions = (pageId: number): boolean => {
    const userPermission = getUserPermissionForPage(pageId);
    
    return !userPermission.CanAccessPage &&
           !userPermission.CanView &&
           !userPermission.CanCreate &&
           !userPermission.CanEdit &&
           !userPermission.CanDelete;
  };

  // Get tooltip for user checkbox
  const getUserCheckboxTooltip = (pageId: number, field: keyof Permission, userPermission: Permission): string => {
    if (isSelectedUserAdmin) {
      return 'Admin has full access to all permissions';
    }

    const rolePermission = getRolePermissionForPage(pageId);
    const page = pages.find(p => p.Id === pageId);
    const pageName = page?.PageName || 'this page';
    const fieldName = field.replace('Can', '').toLowerCase();

    if (!rolePermission?.CanAccessPage) {
      return `Role must have page access permission first for ${pageName}`;
    }

    if (field !== 'CanAccessPage') {
      const permissionKey = field as keyof RolePermission;
      if (permissionKey in rolePermission && !rolePermission[permissionKey]) {
        return `Role must have ${fieldName} permission first for ${pageName}`;
      }
      
      if (!userPermission.CanAccessPage) {
        return `User must have page access permission first for ${pageName}`;
      }
    }

    const hasPermission = userPermission[field];
    return hasPermission 
      ? `User has ${fieldName} permission for ${pageName} (overrides role)` 
      : `Click to grant ${fieldName} permission to user for ${pageName}`;
  };

  // Auto-save permission on checkbox change with enhanced validation
  const updateUserPermission = async (pageId: number, field: keyof Permission, value: boolean) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    // Prerequisite check - role must have permission
    if (!canUserHavePermission(pageId, field)) {
      const page = pages.find(p => p.Id === pageId);
      const fieldName = field.replace('Can', '').toLowerCase();
      showMessage('warning', `Role must have ${fieldName} permission first for ${page?.PageName}`);
      return;
    }

    // Additional validation for dependent permissions
    if (field !== 'CanAccessPage' && value) {
      const userPermission = getUserPermissionForPage(pageId);
      if (!userPermission.CanAccessPage) {
        const page = pages.find(p => p.Id === pageId);
        const fieldName = field.replace('Can', '').toLowerCase();
        showMessage('warning', `Must grant page access permission first before granting ${fieldName} permission for ${page?.PageName}`);
        return;
      }
    }

    // If revoking CanAccessPage, also revoke all other permissions
    let updatedPermissionData = { [field]: value };
    if (field === 'CanAccessPage' && !value) {
      updatedPermissionData = {
        CanAccessPage: false,
        CanView: false,
        CanCreate: false,
        CanEdit: false,
        CanDelete: false,
      };
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? { ...p, ...updatedPermissionData } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: field === 'CanAccessPage' ? value : false,
          CanView: field === 'CanView' ? value : false,
          CanCreate: field === 'CanCreate' ? value : false,
          CanEdit: field === 'CanEdit' ? value : false,
          CanDelete: field === 'CanDelete' ? value : false,
          ...updatedPermissionData,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Auto-save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        if (field === 'CanAccessPage' && !value) {
          showMessage('success', `All permissions revoked for ${selectedUser?.Name} on ${page?.PageName}`);
        } else {
          const fieldName = field.replace('Can', '').toLowerCase();
          const action = value ? 'granted' : 'revoked';
          showMessage('success', `${fieldName} permission ${action} for ${selectedUser?.Name} on ${page?.PageName}`);
        }
      }
    } catch (error) {
      showMessage('error', 'Failed to update permission');
      console.error('Error updating permission:', error);
      // Revert the change on error
      fetchUserPermissions();
    } finally {
      setLoading(false);
    }
  };

  // Grant All Permissions for specific page with validation
  const grantAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    const rolePermission = getRolePermissionForPage(pageId);
    if (!rolePermission?.CanAccessPage) {
      const page = pages.find(p => p.Id === pageId);
      showMessage('warning', `Role must have page access permission first for ${page?.PageName}`);
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: true,
          CanView: rolePermission.CanView,
          CanCreate: rolePermission.CanCreate,
          CanEdit: rolePermission.CanEdit,
          CanDelete: rolePermission.CanDelete,
        } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: true,
          CanView: rolePermission.CanView,
          CanCreate: rolePermission.CanCreate,
          CanEdit: rolePermission.CanEdit,
          CanDelete: rolePermission.CanDelete,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All available permissions granted for ${selectedUser?.Name} on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to grant all permissions');
      console.error('Error granting all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Revoke All Permissions for specific page
  const revokeAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions revoked for ${selectedUser?.Name} on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to revoke all permissions');
      console.error('Error revoking all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Get unique categories for filter
  const categories = Array.from(new Set(pages.map(page => page.Category).filter(Boolean)));

  return (
    <div className="p-4">
      <div className="mb-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold text-gray-800">User Permissions Management</h1>
            <p className="text-sm text-gray-500">
              Customize individual user permissions that override their role permissions. Role permissions are prerequisites.
            </p>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => router.push("/manage-page")}
              className="flex items-center gap-2 bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-all duration-200 text-sm font-medium"
            >
              📄 Create New Page
            </button>
            <button
              onClick={() => router.push("/manage-role-permission")}
              className="flex items-center gap-2 bg-teal-600 text-white px-4 py-2 rounded-lg hover:bg-teal-700 transition-all duration-200 text-sm font-medium"
            >
              🛡 Assign Page to Role
            </button>
          </div>
        </div>
      </div>

      {/* User Selection */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 mb-3">
        {/* User Selection */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
          <label className="block text-sm font-medium text-gray-700 mb-1.5">
            Select User
          </label>
          <select
            value={selectedUserId}
            onChange={(e) => setSelectedUserId(e.target.value)}
            className="w-full px-2.5 py-2 overflow-auto bg-gray-50 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-all"
          >
            <option value="">Choose a user...</option>
            {users.map((user) => (
              <option key={user.Id} value={user.Id}>
                {user.Name} - {user.Role.Name}
              </option>
            ))}
          </select>
          <p className="mt-6 px-2.5 py-1.5 bg-green-50 border border-green-100 rounded text-md text-green-600">
            👤 User permissions override role permissions but role permissions are prerequisites
          </p>
        </div>

        {/* Selected User Information */}
        {selectedUser && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
            <label className="block text-sm font-medium text-gray-700 mb-1.5">
              User Details
            </label>
            <div className={`p-2.5 rounded-lg border-2 ${isSelectedUserAdmin 
              ? 'bg-red-50 border-red-200' 
              : 'bg-blue-50 border-blue-200'
            }`}>
              <div>
                <h3 className={`font-semibold ${isSelectedUserAdmin ? 'text-red-900' : 'text-blue-900'}`}>
                  {selectedUser.Name}
                  {isSelectedUserAdmin && (
                    <span className="ml-1.5 px-1.5 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">
                      ADMIN
                    </span>
                  )}
                </h3>
                <p className={`text-sm ${isSelectedUserAdmin ? 'text-red-700' : 'text-blue-700'} mt-1`}>
                  <strong>Email:</strong> {selectedUser.Email}
                </p>
                <p className={`text-sm ${isSelectedUserAdmin ? 'text-red-700' : 'text-blue-700'}`}>
                  <strong>Role:</strong> {selectedUser.Role.Name}
                </p>
              </div>
              
              {isSelectedUserAdmin && (
                <div className="mt-1.5 px-2.5 py-1.5 bg-red-100 border border-red-200 rounded text-xs text-red-600">
                  ⚠️ Admin users have full access. Permissions cannot be modified.
                </div>
              )}
              
              {!isSelectedUserAdmin && (
                <div className="mt-1.5 px-2.5 py-1.5 bg-blue-100 border border-blue-200 rounded text-xs text-blue-600">
                  ℹ️ User permissions override role permissions. Page access required before function permissions.
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Animated Single Message */}
      {message && (
        <MessageAlert 
          key={messageKey}
          message={message} 
          onClose={clearMessage} 
        />
      )}

      {/* Permissions Table */}
      {selectedUserId && (
        <div className="bg-white shadow-sm rounded-lg border">
          <div className="px-4 py-3 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-medium text-gray-900">User Permissions</h2>
                <p className="text-xs text-gray-500 mt-1">
                  User permissions override role permissions. Role must have permission first. Page access required before function permissions.
                </p>
                {/* Permission Information with Colors */}
                <div className="mt-2 text-xs">
                  <span className="font-semibold text-green-600">Access Page:</span>
                  <span className="text-gray-600"> Controls page access (prerequisite) | </span>
                  <span className="font-semibold text-blue-600">Functions:</span>
                  <span className="text-gray-600"> </span>
                  <span className="text-blue-600">View</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-yellow-600">Create</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-purple-600">Edit</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-red-600">Delete</span>
                  <span className="text-gray-600"> control specific functionalities</span>
                </div>
              </div>
              
              {/* Filters */}
              <div className="flex items-center space-x-3">
                <input
                  type="text"
                  placeholder="Search pages..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Categories</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Page Details</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-green-600 uppercase">Access</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-blue-600 uppercase">View</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-yellow-600 uppercase">Create</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-purple-600 uppercase">Edit</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-red-600 uppercase">Delete</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-gray-600 uppercase">Quick Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredPages.map((page) => {
                  const userPermission = getUserPermissionForPage(page.Id);
                  const rolePermission = getRolePermissionForPage(page.Id);
                  const hasAllPerms = hasAllAvailablePermissions(page.Id);
                  const hasNoPerms = hasNoPermissions(page.Id);
                  
                  return (
                    <tr key={`page-${page.Id}`} className="hover:bg-gray-50 transition-colors">
                      <td className="px-4 py-3" title={`Category: ${page.Category || 'No Category'}`}>
                        <div className="font-medium text-gray-900">{page.PageName}</div>
                        <div className="text-xs text-gray-500">{page.PageUrl}</div>
                        {/* Role Permission Indicator */}
                        <div className="text-xs text-gray-400 mt-1">
                          Role: {rolePermission ? (
                            <span className={rolePermission.CanAccessPage ? 'text-green-600' : 'text-red-600'}>
                              {rolePermission.CanAccessPage ? '✓ Has Access' : '✗ No Access'}
                            </span>
                          ) : (
                            <span className="text-red-600">✗ No Permission</span>
                          )}
                        </div>
                      </td>
                      
                      {/* User Permissions Only */}
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanAccessPage}
                          onChange={(e) => updateUserPermission(page.Id, 'CanAccessPage', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanAccessPage')}
                          className={`h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanAccessPage') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanAccessPage', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanView}
                          onChange={(e) => updateUserPermission(page.Id, 'CanView', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canGrantSpecificPermission(page.Id, 'CanView')}
                          className={`h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canGrantSpecificPermission(page.Id, 'CanView') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanView', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanCreate}
                          onChange={(e) => updateUserPermission(page.Id, 'CanCreate', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canGrantSpecificPermission(page.Id, 'CanCreate')}
                          className={`h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canGrantSpecificPermission(page.Id, 'CanCreate') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanCreate', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanEdit}
                          onChange={(e) => updateUserPermission(page.Id, 'CanEdit', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canGrantSpecificPermission(page.Id, 'CanEdit')}
                          className={`h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canGrantSpecificPermission(page.Id, 'CanEdit') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanEdit', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanDelete}
                          onChange={(e) => updateUserPermission(page.Id, 'CanDelete', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canGrantSpecificPermission(page.Id, 'CanDelete')}
                          className={`h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canGrantSpecificPermission(page.Id, 'CanDelete') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanDelete', userPermission)}
                        />
                      </td>

                      {/* Page-specific Grant/Revoke All Actions */}
                      <td className="px-3 py-3 text-center">
                        {!isSelectedUserAdmin && (
                          <div className="flex space-x-1 justify-center">
                            <button
                              onClick={() => grantAllPermissionsForPage(page.Id)}
                              disabled={loading || !canUserHavePermission(page.Id, 'CanAccessPage') || hasAllPerms}
                              className={`bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || !canUserHavePermission(page.Id, 'CanAccessPage') || hasAllPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasAllPerms ? "User already has all available permissions" : "Grant all available permissions for this page"}
                            >
                              Grant All
                            </button>
                            <button
                              onClick={() => revokeAllPermissionsForPage(page.Id)}
                              disabled={loading || hasNoPerms}
                              className={`bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasNoPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasNoPerms ? "User has no permissions to revoke" : "Revoke all permissions for this page"}
                            >
                              Revoke All
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredPages.length === 0 && (
            <div className="p-8 text-center text-gray-500">
              <p>No pages found matching your filters.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
-------------------------------------------------------------------------------------------------------------------------



