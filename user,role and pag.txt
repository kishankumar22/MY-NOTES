'use client';
import { useRouter } from "next/navigation";
import React from 'react';
import { useState, useEffect } from 'react';
import axiosInstance from '../lib/axios';

interface Role {
  Id: number;
  Name: string;
}

interface Page {
  Id: number;
  PageName: string;
  PageUrl: string;
  Category?: string;
}

interface Permission {
  Id?: number;
  RoleId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
  Page?: Page;
}

interface ApiResponse<T> {
  success: boolean;
  roles?: T;
  pages?: T;
  permissions?: T;
}

interface Message {
  type: 'success' | 'error' | 'warning' | 'info';
  text: string;
}

// Animated Message Component
const MessageAlert = ({ message, onClose }: { message: Message; onClose: () => void }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    
    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onClose, 300);
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose, message]);

  const styles = {
    success: 'bg-green-100 border-green-400 text-green-700',
    error: 'bg-red-100 border-red-400 text-red-700',
    warning: 'bg-yellow-100 border-yellow-400 text-yellow-700',
    info: 'bg-blue-100 border-blue-400 text-blue-700',
  };

  const icons = {
    success: '✓',
    error: '✗',
    warning: '⚠',
    info: 'ℹ'
  };

  return (
    <div className={`transform transition-all duration-300 ease-in-out ${
      isVisible ? 'translate-y-0 opacity-100 scale-100' : '-translate-y-2 opacity-0 scale-95'
    }`}>
      <div className={`${styles[message.type]} border-l-4 p-3 rounded shadow-sm flex items-center justify-between mb-4 w-full`}>
        <div className="flex items-center">
          <span className="text-lg mr-2">{icons[message.type]}</span>
          <span className="text-sm font-medium">{message.text}</span>
        </div>
        <button
          onClick={() => {
            setIsVisible(false);
            setTimeout(onClose, 300);
          }}
          className="text-xl hover:opacity-70 ml-4 transform transition-transform hover:scale-110"
        >
          ×
        </button>
      </div>
    </div>
  );
};

export default function RolePermissions() {
  const router = useRouter();
  const [roles, setRoles] = useState<Role[]>([]);
  const [pages, setPages] = useState<Page[]>([]);
  const [filteredPages, setFilteredPages] = useState<Page[]>([]);
  const [selectedRoleId, setSelectedRoleId] = useState<string>('');
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [permissions, setPermissions] = useState<Permission[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message | null>(null);
  const [messageKey, setMessageKey] = useState(0);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  // Check if selected role is admin
  const isSelectedRoleAdmin = parseInt(selectedRoleId) === 1;

  // Show message with animation
  const showMessage = (type: 'success' | 'error' | 'warning' | 'info', text: string) => {
    setMessage({ type, text });
    setMessageKey(prev => prev + 1);
  };

  const clearMessage = () => {
    setMessage(null);
  };

  useEffect(() => {
    fetchRoles();
    fetchPages();
  }, []);

  useEffect(() => {
    if (selectedRoleId) {
      const role = roles.find(r => r.Id.toString() === selectedRoleId);
      setSelectedRole(role || null);
      fetchRolePermissions();
    }
  }, [selectedRoleId, roles]);

  // Filter pages based on search and category
  useEffect(() => {
    let filtered = pages;

    if (searchTerm) {
      filtered = filtered.filter(page => 
        page.PageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        page.PageUrl.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(page => page.Category === selectedCategory);
    }

    setFilteredPages(filtered);
  }, [pages, searchTerm, selectedCategory]);

  const fetchRoles = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Role[]>>('/api/role');
      if (response.data.success && response.data.roles) {
        setRoles(response.data.roles);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch roles');
      console.error('Error fetching roles:', error);
    }
  };

  const fetchPages = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Page[]>>('/api/pages');
      if (response.data.success && response.data.pages) {
        setPages(response.data.pages);
        setFilteredPages(response.data.pages);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch pages');
      console.error('Error fetching pages:', error);
    }
  };

  const fetchRolePermissions = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Permission[]>>(`/api/role-permission?roleId=${selectedRoleId}`);
      if (response.data.success && response.data.permissions) {
        setPermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch role permissions');
      console.error('Error fetching role permissions:', error);
    }
  };

  const getPermissionForPage = (pageId: number): Permission => {
    const existing = permissions.find(p => p.PageId === pageId);
    return existing || {
      RoleId: parseInt(selectedRoleId),
      PageId: pageId,
      CanAccessPage: isSelectedRoleAdmin,
      CanView: isSelectedRoleAdmin,
      CanCreate: isSelectedRoleAdmin,
      CanEdit: isSelectedRoleAdmin,
      CanDelete: isSelectedRoleAdmin,
    };
  };

  // Get tooltip for checkboxes
  const getCheckboxTooltip = (pageId: number, field: keyof Permission, hasPermission: boolean): string => {
    if (isSelectedRoleAdmin) {
      return 'Admin role has full access to all permissions';
    }

    const page = pages.find(p => p.Id === pageId);
    const pageName = page?.PageName || 'this page';
    const fieldName = field.replace('Can', '').toLowerCase();

    return hasPermission 
      ? `Click to revoke ${fieldName} permission from ${selectedRole?.Name} role for ${pageName}`
      : `Click to grant ${fieldName} permission to ${selectedRole?.Name} role for ${pageName}`;
  };

  // Auto-save permission on checkbox change
  const updatePermission = async (pageId: number, field: keyof Permission, value: boolean) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? { ...p, [field]: value } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: field === 'CanAccessPage' ? value : false,
          CanView: field === 'CanView' ? value : false,
          CanCreate: field === 'CanCreate' ? value : false,
          CanEdit: field === 'CanEdit' ? value : false,
          CanDelete: field === 'CanDelete' ? value : false,
        });
      }
      
      setPermissions(updatedPermissions);

      // Auto-save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        const fieldName = field.replace('Can', '').toLowerCase();
        const action = value ? 'granted' : 'revoked';
        showMessage('success', `${fieldName} permission ${action} for ${selectedRole?.Name} role on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to update permission');
      console.error('Error updating permission:', error);
    } finally {
      setLoading(false);
    }
  };

  // Check if role has all permissions for a page
  const hasAllPermissions = (pageId: number): boolean => {
    const permission = getPermissionForPage(pageId);
    return permission.CanAccessPage && permission.CanView && permission.CanCreate && permission.CanEdit && permission.CanDelete;
  };

  // Check if role has no permissions for a page
  const hasNoPermissions = (pageId: number): boolean => {
    const permission = getPermissionForPage(pageId);
    return !permission.CanAccessPage && !permission.CanView && !permission.CanCreate && !permission.CanEdit && !permission.CanDelete;
  };

  // Grant All Permissions for specific page
  const grantAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: true,
          CanView: true,
          CanCreate: true,
          CanEdit: true,
          CanDelete: true,
        } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: true,
          CanView: true,
          CanCreate: true,
          CanEdit: true,
          CanDelete: true,
        });
      }
      
      setPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions granted for ${selectedRole?.Name} role on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to grant all permissions');
      console.error('Error granting all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Revoke All Permissions for specific page
  const revokeAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedRoleAdmin) {
      showMessage('warning', 'Cannot modify admin role permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = permissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        } : p
      );
      
      if (!permissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          RoleId: parseInt(selectedRoleId),
          PageId: pageId,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        });
      }
      
      setPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/role-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions revoked for ${selectedRole?.Name} role on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to revoke all permissions');
      console.error('Error revoking all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Get unique categories for filter
  const categories = Array.from(new Set(pages.map(page => page.Category).filter(Boolean)));

  return (
    <div className="p-4">
      <div className="mb-4 flex items-center justify-between">
        {/* Left side text */}
        <div>
          <h1 className="text-2xl font-bold text-gray-800">Role Permissions</h1>
          <p className="text-sm text-gray-600">
            Manage role-based permissions for pages and functions
          </p>
        </div>

        {/* Right side buttons */}
        <div className="flex space-x-2">
          <button
            onClick={() => router.push("/admin/page")}
            className="flex items-center gap-2 bg-indigo-600 text-white px-4 py-2 rounded-lg 
                       hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-400 focus:ring-offset-2 
                       transition-all duration-200 text-sm font-medium"
          >
            📄 Create New Page
          </button>
          <button
            onClick={() => router.push("/admin/user-permission")}
            className="flex items-center gap-2 bg-amber-600 text-white px-4 py-2 rounded-lg 
                       hover:bg-amber-700 focus:ring-2 focus:ring-amber-400 focus:ring-offset-2 
                       transition-all duration-200 text-sm font-medium"
          >
            👤 Assign Page to User
          </button>
        </div>
      </div>

{/* Role Selection and Info Row */}
<div className="grid grid-cols-1 lg:grid-cols-2 gap-3 mb-3">
  {/* Role Selection */}
  <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
    <label className="block text-sm font-medium text-gray-700 mb-1.5">
      Select Role
    </label>
    <select
      value={selectedRoleId}
      onChange={(e) => setSelectedRoleId(e.target.value)}
      className="w-full mt-2 px-2.5 py-2 bg-gray-50 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-all"
    >
      <option value="">Choose a role...</option>
      {roles.map((role) => (
        <option key={role.Id} value={role.Id}>
          {role.Name}
        </option>
      ))}
    </select>
    <p className="mt-4 px-2.5 py-1.5 bg-blue-50 border border-blue-100 rounded text-md text-blue-600">
      💼 Managing permissions for all users with this role
    </p>
  </div>

  {/* Selected Role Information */}
  {selectedRole && (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
      <label className="block text-sm font-medium text-gray-700 mb-1.5">
        Role Information
      </label>
      <div className={`p-2.5 rounded-lg border-2 ${isSelectedRoleAdmin 
        ? 'bg-red-50 border-red-200' 
        : 'bg-blue-50 border-blue-200'
      }`}>
        <div className="flex items-center justify-between">
          <div>
            <h3 className={`font-semibold ${isSelectedRoleAdmin ? 'text-red-900' : 'text-blue-900'}`}>
              {selectedRole.Name}
              <span className="ml-1.5 text-xs font-normal opacity-75">ID: {selectedRole.Id}</span>
              {isSelectedRoleAdmin && (
                <span className="ml-1.5 px-1.5 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">
                  ADMIN
                </span>
              )}
            </h3>
            <div className="flex items-center gap-2.5 mt-1.5 text-xs">
              <div className="flex items-center gap-1">
                <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                <span className="text-green-700">Access</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full"></span>
                <span className="text-blue-700">View</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="w-1.5 h-1.5 bg-yellow-500 rounded-full"></span>
                <span className="text-yellow-700">Create</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                <span className="text-purple-700">Edit</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="w-1.5 h-1.5 bg-red-500 rounded-full"></span>
                <span className="text-red-700">Delete</span>
              </div>
            </div>
          </div>
        </div>
        
        {isSelectedRoleAdmin && (
          <div className="mt-1.5 px-2.5 py-1.5 bg-red-100 border border-red-200 rounded text-xs text-red-600">
            ⚠️ Admin role has full access. Permissions cannot be modified.
          </div>
        )}
        
        {!isSelectedRoleAdmin && (
          <div className="mt-1.5 px-2.5 py-1.5 bg-blue-100 border border-blue-200 rounded text-xs text-blue-600">
            ℹ️ Click checkboxes below to manage role permissions.
          </div>
        )}
      </div>
    </div>
  )}
</div>



      {/* Animated Single Message */}
      {message && (
        <MessageAlert 
          key={messageKey}
          message={message} 
          onClose={clearMessage} 
        />
      )}

      {/* Permissions Table */}
      {selectedRoleId && (
        <div className="bg-white shadow-sm rounded-lg border">
          <div className="px-4 py-3 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-medium text-gray-900">Role Permissions</h2>
                <p className="text-xs text-gray-500 mt-1">
                  Click checkboxes to grant/revoke role permissions. Changes are saved automatically.
                </p>
                {/* Permission Information with Colors */}
                <div className="mt-2 text-xs">
                  <span className="font-semibold text-green-600">Access Page:</span>
                  <span className="text-gray-600"> Controls page access | </span>
                  <span className="font-semibold text-blue-600">Functions:</span>
                  <span className="text-gray-600"> </span>
                  <span className="text-blue-600">View</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-yellow-600">Create</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-purple-600">Edit</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-red-600">Delete</span>
                  <span className="text-gray-600"> control specific functionalities</span>
                </div>
              </div>
              
              {/* Filters */}
              <div className="flex items-center space-x-3">
                <input
                  type="text"
                  placeholder="Search pages..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Categories</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Page Details
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-green-600 uppercase">
                    Access
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-blue-600 uppercase">
                    View
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-yellow-600 uppercase">
                    Create
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-purple-600 uppercase">
                    Edit
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-red-600 uppercase">
                    Delete
                  </th>
                  <th className="px-3 py-2 text-center text-xs font-medium text-gray-600 uppercase">
                    Quick Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredPages.map((page) => {
                  const permission = getPermissionForPage(page.Id);
                  const hasAllPerms = hasAllPermissions(page.Id);
                  const hasNoPerms = hasNoPermissions(page.Id);
                  
                  return (
                    <tr key={page.Id} className="hover:bg-gray-50 transition-colors">
                      <td className="px-4 py-2"
                      title={`Category: ${page.Category || 'No Category'}`}>
                        <div className="font-medium text-gray-900">{page.PageName}</div>
                        <div className="text-xs text-gray-500">{page.PageUrl}</div>
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanAccessPage}
                          onChange={(e) => updatePermission(page.Id, 'CanAccessPage', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanAccessPage', permission.CanAccessPage)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanView}
                          onChange={(e) => updatePermission(page.Id, 'CanView', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanView', permission.CanView)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanCreate}
                          onChange={(e) => updatePermission(page.Id, 'CanCreate', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanCreate', permission.CanCreate)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanEdit}
                          onChange={(e) => updatePermission(page.Id, 'CanEdit', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanEdit', permission.CanEdit)}
                        />
                      </td>
                      
                      <td className="px-3 py-2 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedRoleAdmin || permission.CanDelete}
                          onChange={(e) => updatePermission(page.Id, 'CanDelete', e.target.checked)}
                          disabled={isSelectedRoleAdmin || loading}
                          className="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded transition-all hover:scale-110 disabled:opacity-100"
                          title={getCheckboxTooltip(page.Id, 'CanDelete', permission.CanDelete)}
                        />
                      </td>

                      {/* Page-specific Grant/Revoke All Actions */}
                      <td className="px-3 py-2 text-center">
                        {!isSelectedRoleAdmin && (
                          <div className="flex space-x-1  justify-center">
                            <button
                              onClick={() => grantAllPermissionsForPage(page.Id)}
                              disabled={loading || hasAllPerms}
                              className={`bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasAllPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasAllPerms ? "Role already has all permissions" : "Grant all permissions to this role for this page"}
                            >
                              Grant All
                            </button>
                            <button
                              onClick={() => revokeAllPermissionsForPage(page.Id)}
                              disabled={loading || hasNoPerms}
                              className={`bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasNoPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasNoPerms ? "Role has no permissions to revoke" : "Revoke all permissions from this role for this page"}
                            >
                              Revoke All
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredPages.length === 0 && (
            <div className="p-8 text-center text-gray-500">
              <p>No pages found matching your filters.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

-------------------------------------------------------------------------------------------------------------
'use client';
import React from 'react';
import { useState, useEffect } from 'react';
import axiosInstance from '../lib/axios';
import { useRouter } from "next/navigation";

interface User {
  Id: number;
  Name: string;
  Email: string;
  Role: { Id: number; Name: string; };
}

interface Page {
  Id: number;
  PageName: string;
  PageUrl: string;
  Category?: string;
}

interface Permission {
  Id?: number;
  UserId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
  Page?: Page;
}

interface RolePermission {
  RoleId: number;
  PageId: number;
  CanAccessPage: boolean;
  CanView: boolean;
  CanCreate: boolean;
  CanEdit: boolean;
  CanDelete: boolean;
}

interface ApiResponse<T> {
  success: boolean;
  users?: T;
  pages?: T;
  permissions?: T;
}

interface Message {
  type: 'success' | 'error' | 'warning' | 'info';
  text: string;
}

// Animated Message Component
const MessageAlert = ({ message, onClose }: { message: Message; onClose: () => void }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Fade in animation
    setIsVisible(true);
    
    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onClose, 300); // Wait for fade out animation
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose, message]);

  const styles = {
    success: 'bg-green-100 border-green-400 text-green-700',
    error: 'bg-red-100 border-red-400 text-red-700',
    warning: 'bg-yellow-100 border-yellow-400 text-yellow-700',
    info: 'bg-blue-100 border-blue-400 text-blue-700',
  };

  const icons = {
    success: '✓',
    error: '✗',
    warning: '⚠',
    info: 'ℹ'
  };

  return (
    <div className={`transform transition-all duration-300 ease-in-out ${
      isVisible ? 'translate-y-0 opacity-100 scale-100' : '-translate-y-2 opacity-0 scale-95'
    }`}>
      <div className={`${styles[message.type]} border-l-4 p-3 rounded shadow-sm flex items-center justify-between mb-4 w-full`}>
        <div className="flex items-center">
          <span className="text-lg mr-2">{icons[message.type]}</span>
          <span className="text-sm font-medium">{message.text}</span>
        </div>
        <button
          onClick={() => {
            setIsVisible(false);
            setTimeout(onClose, 300);
          }}
          className="text-xl hover:opacity-70 ml-4 transform transition-transform hover:scale-110"
        >
          ×
        </button>
      </div>
    </div>
  );
};

export default function UserPermissions() {
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [pages, setPages] = useState<Page[]>([]);
  const [filteredPages, setFilteredPages] = useState<Page[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [userPermissions, setUserPermissions] = useState<Permission[]>([]);
  const [rolePermissions, setRolePermissions] = useState<RolePermission[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message | null>(null);
  const [messageKey, setMessageKey] = useState(0); // Force re-render for animation
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const isSelectedUserAdmin = selectedUser?.Role.Id === 1;

  // Show message with animation
  const showMessage = (type: 'success' | 'error' | 'warning' | 'info', text: string) => {
    setMessage({ type, text });
    setMessageKey(prev => prev + 1); // Force new animation
  };

  const clearMessage = () => {
    setMessage(null);
  };

  useEffect(() => {
    fetchUsers();
    fetchPages();
  }, []);

  useEffect(() => {
    if (selectedUserId) {
      const user = users.find(u => u.Id.toString() === selectedUserId);
      setSelectedUser(user || null);
      fetchUserPermissions();
      if (user) {
        fetchRolePermissions(user.Role.Id);
      }
    }
  }, [selectedUserId, users]);

  // Filter pages based on search and category
  useEffect(() => {
    let filtered = pages;

    if (searchTerm) {
      filtered = filtered.filter(page => 
        page.PageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        page.PageUrl.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(page => page.Category === selectedCategory);
    }

    setFilteredPages(filtered);
  }, [pages, searchTerm, selectedCategory]);

  const fetchUsers = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<User[]>>('/api/user');
      if (response.data.success && response.data.users) {
        setUsers(response.data.users);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch users');
      console.error('Error fetching users:', error);
    }
  };

  const fetchPages = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Page[]>>('/api/pages');
      if (response.data.success && response.data.pages) {
        setPages(response.data.pages);
        setFilteredPages(response.data.pages);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch pages');
      console.error('Error fetching pages:', error);
    }
  };

  const fetchUserPermissions = async () => {
    try {
      const response = await axiosInstance.get<ApiResponse<Permission[]>>(`/api/user-permission?userId=${selectedUserId}`);
      if (response.data.success && response.data.permissions) {
        setUserPermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch user permissions');
      console.error('Error fetching user permissions:', error);
    }
  };

  const fetchRolePermissions = async (roleId: number) => {
    try {
      const response = await axiosInstance.get<ApiResponse<RolePermission[]>>(`/api/role-permission?roleId=${roleId}`);
      if (response.data.success && response.data.permissions) {
        setRolePermissions(response.data.permissions);
      }
    } catch (error) {
      showMessage('error', 'Failed to fetch role permissions');
      console.error('Error fetching role permissions:', error);
    }
  };

  const getRolePermissionForPage = (pageId: number): RolePermission | null => {
    return rolePermissions.find(p => p.PageId === pageId) || null;
  };

  const getUserPermissionForPage = (pageId: number): Permission => {
    const existing = userPermissions.find(p => p.PageId === pageId);
    return existing || {
      UserId: parseInt(selectedUserId),
      PageId: pageId,
      CanAccessPage: isSelectedUserAdmin,
      CanView: isSelectedUserAdmin,
      CanCreate: isSelectedUserAdmin,
      CanEdit: isSelectedUserAdmin,
      CanDelete: isSelectedUserAdmin,
    };
  };

  // Check if user can have permission based on role
  const canUserHavePermission = (pageId: number, field: keyof Permission): boolean => {
    if (isSelectedUserAdmin) return true;
    
    const rolePermission = getRolePermissionForPage(pageId);
    
    // For any permission, role must have CanAccessPage first
    if (!rolePermission?.CanAccessPage) {
      return false;
    }

    // For specific permissions, role must have that specific permission
    if (field !== 'CanAccessPage' && rolePermission) {
      const permissionKey = field as keyof RolePermission;
      if (permissionKey in rolePermission && !rolePermission[permissionKey]) {
        return false;
      }
    }

    return true;
  };

  // Check if user has all available permissions for a page
  const hasAllAvailablePermissions = (pageId: number): boolean => {
    const rolePermission = getRolePermissionForPage(pageId);
    const userPermission = getUserPermissionForPage(pageId);
    
    if (!rolePermission?.CanAccessPage) return false;
    
    return userPermission.CanAccessPage &&
           (!rolePermission.CanView || userPermission.CanView) &&
           (!rolePermission.CanCreate || userPermission.CanCreate) &&
           (!rolePermission.CanEdit || userPermission.CanEdit) &&
           (!rolePermission.CanDelete || userPermission.CanDelete);
  };

  // Check if user has no permissions for a page
  const hasNoPermissions = (pageId: number): boolean => {
    const userPermission = getUserPermissionForPage(pageId);
    
    return !userPermission.CanAccessPage &&
           !userPermission.CanView &&
           !userPermission.CanCreate &&
           !userPermission.CanEdit &&
           !userPermission.CanDelete;
  };

  // Get tooltip for user checkbox
  const getUserCheckboxTooltip = (pageId: number, field: keyof Permission, userPermission: Permission): string => {
    if (isSelectedUserAdmin) {
      return 'Admin has full access to all permissions';
    }

    const rolePermission = getRolePermissionForPage(pageId);
    const page = pages.find(p => p.Id === pageId);
    const pageName = page?.PageName || 'this page';
    const fieldName = field.replace('Can', '').toLowerCase();

    if (!rolePermission?.CanAccessPage) {
      return `Grant access permission to role first, then grant to user for ${pageName}`;
    }

    if (field !== 'CanAccessPage' && rolePermission) {
      const permissionKey = field as keyof RolePermission;
      if (permissionKey in rolePermission && !rolePermission[permissionKey]) {
        return `Grant ${fieldName} permission to role first, then grant to user for ${pageName}`;
      }
    }

    const hasPermission = userPermission[field];
    return hasPermission 
      ? `User has ${fieldName} permission for ${pageName} (overrides role)` 
      : `Click to grant ${fieldName} permission to user for ${pageName}`;
  };

  // Auto-save permission on checkbox change
  const updateUserPermission = async (pageId: number, field: keyof Permission, value: boolean) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    if (!canUserHavePermission(pageId, field)) {
      const page = pages.find(p => p.Id === pageId);
      const fieldName = field.replace('Can', '').toLowerCase();
      showMessage('warning', `Grant ${fieldName} permission to role first for ${page?.PageName}`);
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? { ...p, [field]: value } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: field === 'CanAccessPage' ? value : false,
          CanView: field === 'CanView' ? value : false,
          CanCreate: field === 'CanCreate' ? value : false,
          CanEdit: field === 'CanEdit' ? value : false,
          CanDelete: field === 'CanDelete' ? value : false,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Auto-save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        const fieldName = field.replace('Can', '').toLowerCase();
        const action = value ? 'granted' : 'revoked';
        showMessage('success', `${fieldName} permission ${action} for ${selectedUser?.Name} on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to update permission');
      console.error('Error updating permission:', error);
    } finally {
      setLoading(false);
    }
  };

  // Grant All Permissions for specific page
  const grantAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    const rolePermission = getRolePermissionForPage(pageId);
    if (!rolePermission?.CanAccessPage) {
      const page = pages.find(p => p.Id === pageId);
      showMessage('warning', `Grant access permission to role first for ${page?.PageName}`);
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: true,
          CanView: rolePermission.CanView,
          CanCreate: rolePermission.CanCreate,
          CanEdit: rolePermission.CanEdit,
          CanDelete: rolePermission.CanDelete,
        } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: true,
          CanView: rolePermission.CanView,
          CanCreate: rolePermission.CanCreate,
          CanEdit: rolePermission.CanEdit,
          CanDelete: rolePermission.CanDelete,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions granted for ${selectedUser?.Name} on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to grant all permissions');
      console.error('Error granting all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Revoke All Permissions for specific page
  const revokeAllPermissionsForPage = async (pageId: number) => {
    if (isSelectedUserAdmin) {
      showMessage('warning', 'Cannot modify admin permissions');
      return;
    }

    setLoading(true);
    try {
      const updatedPermissions = userPermissions.map(p => 
        p.PageId === pageId ? {
          ...p,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        } : p
      );
      
      if (!userPermissions.find(p => p.PageId === pageId)) {
        updatedPermissions.push({
          UserId: parseInt(selectedUserId),
          PageId: pageId,
          CanAccessPage: false,
          CanView: false,
          CanCreate: false,
          CanEdit: false,
          CanDelete: false,
        });
      }
      
      setUserPermissions(updatedPermissions);

      // Save to API
      const permission = updatedPermissions.find(p => p.PageId === pageId);
      if (permission) {
        await axiosInstance.post('/api/user-permission', {
          ...permission,
          CreatedBy: 1,
        });
        
        const page = pages.find(p => p.Id === pageId);
        showMessage('success', `All permissions revoked for ${selectedUser?.Name} on ${page?.PageName}`);
      }
    } catch (error) {
      showMessage('error', 'Failed to revoke all permissions');
      console.error('Error revoking all permissions:', error);
    } finally {
      setLoading(false);
    }
  };

  // Get unique categories for filter
  const categories = Array.from(new Set(pages.map(page => page.Category).filter(Boolean)));

  return (
    <div className="p-4">
      <div className="mb-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold text-gray-800">User Permissions Management</h1>
            <p className="text-sm text-gray-500">
              Customize individual user permissions that override their role permissions
            </p>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => router.push("/admin/page")}
              className="flex items-center gap-2 bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-all duration-200 text-sm font-medium"
            >
              📄 Create New Page
            </button>
            <button
              onClick={() => router.push("/admin/role-permission")}
              className="flex items-center gap-2 bg-teal-600 text-white px-4 py-2 rounded-lg hover:bg-teal-700 transition-all duration-200 text-sm font-medium"
            >
              🛡 Assign Page to Role
            </button>
          </div>
        </div>
      </div>

{/* User Selection */}
<div className="grid grid-cols-1 lg:grid-cols-2 gap-3 mb-3">
  {/* User Selection */}
  <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
    <label className="block text-sm font-medium text-gray-700 mb-1.5">
      Select User
    </label>
    <select
      value={selectedUserId}
      onChange={(e) => setSelectedUserId(e.target.value)}
      className="w-full px-2.5 py-2  overflow-auto bg-gray-50 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-all"
    >
      <option value="">Choose a user...</option>
      {users.map((user) => (
        <option key={user.Id} value={user.Id}>
          {user.Name} - {user.Role.Name}
        </option>
      ))}
    </select>
    <p className="mt-6 px-2.5 py-1.5 bg-green-50 border border-green-100 rounded text-md text-green-600">
      👤 Select a user to manage their specific permissions
    </p>
  </div>

  {/* Selected User Information */}
  {selectedUser && (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-3">
      <label className="block text-sm font-medium text-gray-700 mb-1.5">
        User Details
      </label>
      <div className={`p-2.5 rounded-lg border-2 ${isSelectedUserAdmin 
        ? 'bg-red-50 border-red-200' 
        : 'bg-blue-50 border-blue-200'
      }`}>
        <div>
          <h3 className={`font-semibold ${isSelectedUserAdmin ? 'text-red-900' : 'text-blue-900'}`}>
            {selectedUser.Name}
            {isSelectedUserAdmin && (
              <span className="ml-1.5 px-1.5 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">
                ADMIN
              </span>
            )}
          </h3>
          <p className={`text-sm ${isSelectedUserAdmin ? 'text-red-700' : 'text-blue-700'} mt-1`}>
            <strong>Email:</strong> {selectedUser.Email}
          </p>
          <p className={`text-sm ${isSelectedUserAdmin ? 'text-red-700' : 'text-blue-700'}`}>
            <strong>Role:</strong> {selectedUser.Role.Name}
          </p>
        </div>
        
        {isSelectedUserAdmin && (
          <div className="mt-1.5 px-2.5 py-1.5 bg-red-100 border border-red-200 rounded text-xs text-red-600">
            ⚠️ Admin users have full access. Permissions cannot be modified.
          </div>
        )}
        
        {!isSelectedUserAdmin && (
          <div className="mt-1.5 px-2.5 py-1.5 bg-blue-100 border border-blue-200 rounded text-xs text-blue-600">
            ℹ️ User permissions will override their role permissions.
          </div>
        )}
      </div>
    </div>
  )}
</div>


      {/* Animated Single Message */}
      {message && (
        <MessageAlert 
          key={messageKey}
          message={message} 
          onClose={clearMessage} 
        />
      )}

      {/* Permissions Table */}
      {selectedUserId && (
        <div className="bg-white shadow-sm rounded-lg border">
          <div className="px-4 py-3 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-medium text-gray-900">User Permissions</h2>
                <p className="text-xs text-gray-500 mt-1">
                  Click checkboxes to grant/revoke user permissions. Role must have permission first.
                </p>
                {/* Permission Information with Colors */}
                <div className="mt-2 text-xs">
                  <span className="font-semibold text-green-600">Access Page:</span>
                  <span className="text-gray-600"> Controls page access | </span>
                  <span className="font-semibold text-blue-600">Functions:</span>
                  <span className="text-gray-600"> </span>
                  <span className="text-blue-600">View</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-yellow-600">Create</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-purple-600">Edit</span>
                  <span className="text-gray-600">, </span>
                  <span className="text-red-600">Delete</span>
                  <span className="text-gray-600"> control specific functionalities</span>
                </div>
              </div>
              
              {/* Filters */}
              <div className="flex items-center space-x-3">
                <input
                  type="text"
                  placeholder="Search pages..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Categories</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Page Details</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-green-600 uppercase">Access</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-blue-600 uppercase">View</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-yellow-600 uppercase">Create</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-purple-600 uppercase">Edit</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-red-600 uppercase">Delete</th>
                  <th className="px-3 py-2 text-center text-xs font-semibold text-gray-600 uppercase">Quick Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredPages.map((page) => {
                  const userPermission = getUserPermissionForPage(page.Id);
                  const hasAllPerms = hasAllAvailablePermissions(page.Id);
                  const hasNoPerms = hasNoPermissions(page.Id);
                  
                  return (
                    <tr key={`page-${page.Id}`} className="hover:bg-gray-50 transition-colors">
                      <td className="px-4 py-3"
                      title={`Category: ${page.Category || 'No Category'}`}>
                        <div className="font-medium text-gray-900">{page.PageName}</div>
                        <div className="text-xs text-gray-500"> {page.PageUrl}</div>
                      </td>
                      
                      {/* User Permissions Only */}
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanAccessPage}
                          onChange={(e) => updateUserPermission(page.Id, 'CanAccessPage', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanAccessPage')}
                          className={`h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanAccessPage') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanAccessPage', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanView}
                          onChange={(e) => updateUserPermission(page.Id, 'CanView', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanView')}
                          className={`h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanView') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanView', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanCreate}
                          onChange={(e) => updateUserPermission(page.Id, 'CanCreate', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanCreate')}
                          className={`h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanCreate') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanCreate', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanEdit}
                          onChange={(e) => updateUserPermission(page.Id, 'CanEdit', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanEdit')}
                          className={`h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanEdit') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanEdit', userPermission)}
                        />
                      </td>
                      
                      <td className="px-3 py-3 text-center">
                        <input
                          type="checkbox"
                          checked={isSelectedUserAdmin || userPermission.CanDelete}
                          onChange={(e) => updateUserPermission(page.Id, 'CanDelete', e.target.checked)}
                          disabled={isSelectedUserAdmin || loading || !canUserHavePermission(page.Id, 'CanDelete')}
                          className={`h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded transition-all hover:scale-110 ${
                            (!canUserHavePermission(page.Id, 'CanDelete') && !isSelectedUserAdmin) 
                              ? 'opacity-50 cursor-not-allowed' 
                              : 'disabled:opacity-50'
                          }`}
                          title={getUserCheckboxTooltip(page.Id, 'CanDelete', userPermission)}
                        />
                      </td>

                      {/* Page-specific Grant/Revoke All Actions */}
                      <td className="px-3 py-3 text-center">
                        {!isSelectedUserAdmin && (
                          <div className="flex space-x-1 justify-center">
                            <button
                              onClick={() => grantAllPermissionsForPage(page.Id)}
                              disabled={loading || !canUserHavePermission(page.Id, 'CanAccessPage') || hasAllPerms}
                              className={`bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || !canUserHavePermission(page.Id, 'CanAccessPage') || hasAllPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasAllPerms ? "User already has all available permissions" : "Grant all available permissions for this page"}
                            >
                              Grant All
                            </button>
                            <button
                              onClick={() => revokeAllPermissionsForPage(page.Id)}
                              disabled={loading || hasNoPerms}
                              className={`bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs font-medium transition-all transform hover:scale-105 ${
                                (loading || hasNoPerms)
                                  ? 'opacity-50 cursor-not-allowed'
                                  : ''
                              }`}
                              title={hasNoPerms ? "User has no permissions to revoke" : "Revoke all permissions for this page"}
                            >
                              Revoke All
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredPages.length === 0 && (
            <div className="p-8 text-center text-gray-500">
              <p>No pages found matching your filters.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
	-----------------------------------------------------------------
'use client';

import { useRouter } from "next/navigation";
import { useState, useEffect, useMemo } from 'react';
import axios from '@/app/lib/axios';

interface Page {
  Id: number;
  PageName: string;
  PageUrl: string;
  Category?: string;
  IsActive: boolean;
  CreatedBy: string;
  CreatedOn: string;
  ModifiedBy?: string;
  ModifiedOn?: string;
}

type Message = {
  text: string;
  type: 'success' | 'error';
} | null;

export default function PageManager() {
  const router = useRouter();
  const [pages, setPages] = useState<Page[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingPage, setEditingPage] = useState<Page | null>(null);
  const [formData, setFormData] = useState({
    PageName: '',
    PageUrl: '',
    Category: '',
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message>(null);
  const [showConfirm, setShowConfirm] = useState<'delete' | 'toggle' | null>(null);
  const [selectedPage, setSelectedPage] = useState<Page | null>(null);
  
  // Filter and pagination states
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [itemsPerPage, setItemsPerPage] = useState(25);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    fetchPages();
  }, []);

  useEffect(() => {
    if (message) {
      const timer = setTimeout(() => setMessage(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [message]);

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, selectedCategory, selectedStatus, itemsPerPage]);

  const fetchPages = async () => {
    try {
      const response = await axios.get<{ success: boolean; pages: Page[] }>('/api/pages');
      if (response.data.success) {
        setPages(response.data.pages);
      }
    } catch (error) {
      setMessage({ text: 'Failed to fetch pages.', type: 'error' });
    }
  };

  // Get unique categories
  const categories = useMemo(() => {
    return Array.from(new Set(pages.map(page => page.Category).filter(Boolean)));
  }, [pages]);

  // Filtered and paginated pages
  const filteredPages = useMemo(() => {
    let filtered = pages;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(page =>
        page.PageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        page.PageUrl.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (page.Category && page.Category.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // Category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(page => page.Category === selectedCategory);
    }

    // Status filter
    if (selectedStatus !== 'all') {
      filtered = filtered.filter(page => 
        selectedStatus === 'active' ? page.IsActive : !page.IsActive
      );
    }

    return filtered;
  }, [pages, searchTerm, selectedCategory, selectedStatus]);

  // Pagination logic
  const totalPages = Math.ceil(filteredPages.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedPages = filteredPages.slice(startIndex, startIndex + itemsPerPage);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const url = editingPage ? `/api/pages/${editingPage.Id}` : '/api/pages';
      const method = editingPage ? 'put' : 'post';
      
      const response = await axios[method]<{ success: boolean; page: Page }>(url, formData);

      if (response.data.success) {
        const updatedPage = response.data.page;
        if (editingPage) {
          setPages((prev) =>
            [...prev.map((p) => (p.Id === editingPage.Id ? updatedPage : p))].sort((a, b) =>
              a.PageName.localeCompare(b.PageName)
            )
          );
          setMessage({ text: 'Page updated successfully.', type: 'success' });
        } else {
          setPages((prev) =>
            [...prev, updatedPage].sort((a, b) => a.PageName.localeCompare(b.PageName))
          );
          setMessage({ text: 'Page created successfully.', type: 'success' });
        }
        resetForm();
        setIsModalOpen(false);
      }
    } catch (error) {
      setMessage({ text: 'Failed to save page.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (page: Page) => {
    setEditingPage(page);
    setFormData({
      PageName: page.PageName,
      PageUrl: page.PageUrl,
      Category: page.Category || '',
    });
    setIsModalOpen(true);
  };

  const handleToggleClick = (page: Page) => {
    setSelectedPage(page);
    setShowConfirm('toggle');
  };

  const handleDeleteClick = (page: Page) => {
    setSelectedPage(page);
    setShowConfirm('delete');
  };

  const handleToggle = async () => {
    if (!selectedPage) return;
    const newActive = !selectedPage.IsActive;
    try {
      const response = await axios.patch<{ success: boolean; page: Page }>(
        `/api/pages/${selectedPage.Id}`,
        { IsActive: newActive }
      );
      if (response.data.success) {
        setPages((prev) =>
          prev.map((p) => (p.Id === selectedPage.Id ? { ...p, IsActive: newActive } : p))
        );
        setMessage({
          text: `Page ${newActive ? 'activated' : 'deactivated'} successfully.`,
          type: 'success',
        });
      }
    } catch (error) {
      setMessage({ text: 'Failed to update page status.', type: 'error' });
    } finally {
      setShowConfirm(null);
      setSelectedPage(null);
    }
  };

  const handleDelete = async () => {
    if (!selectedPage) return;
    try {
      const response = await axios.delete<{ success: boolean }>(`/api/pages/${selectedPage.Id}`);
      if (response.data.success) {
        setPages((prev) => prev.filter((p) => p.Id !== selectedPage.Id));
        setMessage({ text: 'Page deleted successfully.', type: 'success' });
      }
    } catch (error) {
      setMessage({ text: 'Failed to delete page.', type: 'error' });
    } finally {
      setShowConfirm(null);
      setSelectedPage(null);
    }
  };

  const resetForm = () => {
    setFormData({ PageName: '', PageUrl: '', Category: '' });
    setEditingPage(null);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setSelectedCategory('all');
    setSelectedStatus('all');
    setCurrentPage(1);
  };

  return (
    <div className="p-4">
      {message && (
        <div
          className={`fixed top-4 left-1/2 transform -translate-x-1/2 p-4 rounded text-white ${
            message.type === 'success' ? 'bg-green-500' : 'bg-red-500'
          } z-50 shadow-lg`}
        >
          {message.text}
        </div>
      )}

      {/* Header */}
      <div className="mb-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Page Management</h1>
            <p className="text-sm text-gray-500">Manage pages, categories, and permissions</p>
          </div>

          <div className="flex flex-wrap items-center gap-2">
            <button
              onClick={() => setIsModalOpen(true)}
              className="flex items-center gap-2 bg-indigo-600 text-white px-3 py-2 rounded-lg 
                         hover:bg-indigo-700 transition-all duration-200 text-sm font-medium"
            >
              <span className="hidden sm:inline">📄</span>
              <span className="sm:hidden">+</span>
              Create Page
            </button>

            <button
              onClick={() => router.push("/admin/role-permission")}
              className="flex items-center gap-2 bg-teal-600 text-white px-3 py-2 rounded-lg 
                         hover:bg-teal-700 transition-all duration-200 text-sm font-medium"
            >
              <span className="hidden sm:inline">🛡</span>
              Role Permissions
            </button>

            <button
              onClick={() => router.push("/admin/user-permission")}
              className="flex items-center gap-2 bg-amber-600 text-white px-3 py-2 rounded-lg 
                         hover:bg-amber-700 transition-all duration-200 text-sm font-medium"
            >
              <span className="hidden sm:inline">👤</span>
              User Permissions
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4">
        <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-3 flex-1 w-full lg:w-auto">
            {/* Search */}
            <div className="flex-1 min-w-0">
              <input
                type="text"
                placeholder="Search pages..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Category Filter */}
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Categories</option>
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>

            {/* Status Filter */}
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
              className="px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>

            {/* Clear Filters */}
            <button
              onClick={clearFilters}
              className="px-3 py-2 text-sm text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
            >
              Clear
            </button>
          </div>

          {/* Items Per Page */}
          <div className="flex items-center gap-2 text-sm">
            <label className="text-gray-600 whitespace-nowrap">Show:</label>
            <select
              value={itemsPerPage}
              onChange={(e) => setItemsPerPage(Number(e.target.value))}
              className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value={25}>25</option>
              <option value={50}>50</option>
              <option value={75}>75</option>
              <option value={100}>100</option>
            </select>
          </div>
        </div>
      </div>

      {/* Results Summary */}
      <div className="mb-3">
        <p className="text-sm text-gray-600">
          Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredPages.length)} of {filteredPages.length} pages
          {searchTerm && ` (filtered from ${pages.length} total)`}
        </p>
      </div>

      {/* Table */}
      <div className="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
        {/* Desktop Table */}
        <div className="hidden md:block overflow-x-auto">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Page Details
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Category
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {paginatedPages.map((page) => (
                <tr key={page.Id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-4 py-3">
                    <div className="font-medium text-gray-900">{page.PageName}</div>
                    <div className="text-sm text-gray-500">{page.PageUrl}</div>
                  </td>
                  <td className="px-4 py-3">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                      {page.Category || 'No Category'}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        page.IsActive
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {page.IsActive ? '● Active' : '○ Inactive'}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-center">
                    <div className="flex items-center justify-center space-x-2">
                   <button
  onClick={() => handleEdit(page)}
  className="px-2 py-1 text-blue-600 hover:text-blue-900 text-sm font-medium transition-all hover:ring hover:ring-blue-300 rounded"
>
  Edit
</button>

<button
  onClick={() => handleToggleClick(page)}
  className={`px-2 py-1 text-sm font-medium rounded transition-all hover:ring ${
    page.IsActive
      ? 'text-red-600 hover:text-red-900 hover:ring-red-300'
      : 'text-green-600 hover:text-green-900 hover:ring-green-300'
  }`}
>
  {page.IsActive ? 'Deactivate' : 'Activate'}
</button>

<button
  onClick={() => handleDeleteClick(page)}
  className="px-2 py-1 text-red-600 hover:text-red-900 text-sm font-medium transition-all hover:ring hover:ring-red-300 rounded"
>
  Delete
</button>

                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Mobile Cards */}
        <div className="md:hidden">
          {paginatedPages.map((page) => (
            <div key={page.Id} className="p-4 border-b border-gray-200 last:border-b-0">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <h3 className="font-medium text-gray-900 truncate">{page.PageName}</h3>
                  <p className="text-sm text-gray-500 truncate">{page.PageUrl}</p>
                  <div className="flex items-center mt-2 space-x-3">
                    <span className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      {page.Category || 'No Category'}
                    </span>
                    <span
                      className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                        page.IsActive
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {page.IsActive ? '● Active' : '○ Inactive'}
                    </span>
                  </div>
                </div>
              </div>
              <div className="mt-3 flex space-x-3">
                <button
                  onClick={() => handleEdit(page)}
                  className="text-blue-600 hover:text-blue-900 text-sm font-medium"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleToggleClick(page)}
                  className={`text-sm font-medium ${
                    page.IsActive ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'
                  }`}
                >
                  {page.IsActive ? 'Deactivate' : 'Activate'}
                </button>
                <button
                  onClick={() => handleDeleteClick(page)}
                  className="text-red-600 hover:text-red-900 text-sm font-medium"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Empty State */}
        {paginatedPages.length === 0 && (
          <div className="p-8 text-center">
            <div className="text-gray-500">
              {filteredPages.length === 0 ? (
                <div>
                  <p className="text-lg font-medium mb-2">No pages found</p>
                  <p className="text-sm">Try adjusting your search or filter criteria</p>
                </div>
              ) : (
                <p>No pages to display on this page</p>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex flex-col sm:flex-row items-center justify-between mt-4 gap-4">
          <div className="text-sm text-gray-600">
            Page {currentPage} of {totalPages}
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage === 1}
              className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Previous
            </button>
            
            <div className="flex items-center space-x-1">
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                let pageNum;
                if (totalPages <= 5) {
                  pageNum = i + 1;
                } else if (currentPage <= 3) {
                  pageNum = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  pageNum = totalPages - 4 + i;
                } else {
                  pageNum = currentPage - 2 + i;
                }
                
                return (
                  <button
                    key={pageNum}
                    onClick={() => setCurrentPage(pageNum)}
                    className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                      currentPage === pageNum
                        ? 'bg-blue-600 text-white'
                        : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {pageNum}
                  </button>
                );
              })}
            </div>

            <button
              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
              disabled={currentPage === totalPages}
              className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Next
            </button>
          </div>
        </div>
      )}

      {/* Modal और Confirm Dialogs यहाँ same रहेंगे */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center p-3 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">
              {editingPage ? 'Edit Page' : 'Create New Page'}
            </h2>

            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Page Name *
                </label>
                <input
                  type="text"
                  value={formData.PageName}
                  onChange={(e) =>
                    setFormData({ ...formData, PageName: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Page URL *
                </label>
                <input
                  type="text"
                  value={formData.PageUrl}
                  onChange={(e) =>
                    setFormData({ ...formData, PageUrl: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Category
                </label>
                <input
                  type="text"
                  value={formData.Category}
                  onChange={(e) =>
                    setFormData({ ...formData, Category: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setIsModalOpen(false);
                    resetForm();
                  }}
                  className="flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
                >
                  {loading ? 'Saving...' : editingPage ? 'Update' : 'Create'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showConfirm && selectedPage && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center p-3 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">
              Confirm {showConfirm === 'delete' ? 'Deletion' : selectedPage.IsActive ? 'Deactivation' : 'Activation'}
            </h2>
            <p className="mb-6">
              Are you sure you want to {showConfirm === 'delete' ? 'delete' : selectedPage.IsActive ? 'deactivate' : 'activate'} the page "{selectedPage.PageName}"?
            </p>
            <div className="flex gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowConfirm(null);
                  setSelectedPage(null);
                }}
                className="flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="button"
                onClick={showConfirm === 'delete' ? handleDelete : handleToggle}
                className={`flex-1 px-4 py-2 text-white rounded-md ${
                  showConfirm === 'delete'
                    ? 'bg-red-500 hover:bg-red-600'
                    : selectedPage.IsActive
                    ? 'bg-red-500 hover:bg-red-600'
                    : 'bg-green-500 hover:bg-green-600'
                }`}
              >
                {showConfirm === 'delete' ? 'Delete' : selectedPage.IsActive ? 'Deactivate' : 'Activate'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
